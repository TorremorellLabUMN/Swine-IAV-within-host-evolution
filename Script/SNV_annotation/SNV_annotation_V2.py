#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed May 20 12:32:56 2020

@author: Chong Li
"""
import sys
#add the dict for amino acid translation
amino_acid_dict = {"TTT":"F", "TTC":"F", "TTA":"L", "TTG":"L", "CTT":"L", "CTC":"L", "CTA":"L", "CTG":"L", "ATT":"I", "ATC":"I", "ATA":"I", "ATG":"M", "GTT":"V", "GTC":"V", "GTA":"V", "GTG":"V", "TCT":"S", "TCC":"S", "TCA":"S","TCG":"S", "CCT":"P", "CCC":"P", "CCA":"P", "CCG":"P", "ACT":"T", "ACC":"T", "ACA":"T", "ACG":"T", "GCT":"A", "GCC":"A", "GCA":"A", "GCG":"A", "TAT":"Y", "TAC":"Y", "TAA":"*", "TAG":"*", "CAT":"H", "CAC":"H", "CAA":"Q", "CAG":"Q", "AAT":"N", "AAC":"N", "AAA":"K", "AAG":"K", "GAT":"D", "GAC":"D", "GAA":"E", "GAG":"E", "TGT":"C", "TGC":"C", "TGA":"*", "TGG":"W", "CGT":"R", "CGC":"R", "CGA":"R", "CGG":"R", "AGT":"S", "AGC":"S", "AGA":"R", "AGG":"R", "GGT":"G", "GGC":"G", "GGA":"G", "GGG":"G"}
#add the reference sequences from the H1N1 and H3N2 challenge viruses
HA_H1_seq="ATGAAGGCAATACTAGTAGTCCTGCTATATACATTTACAACCGCAAATGCCGACACATTATGTATAGGTTATCATGCAAACAATTCAACTGACACCGTAGACACAGTACTAGAAAAGAATGTAACAGTAACACACTCTGTCAACCTTCTAGAAAACAGGCATAATGGGAAACTATGTAAACTAAGAGGGGTAGCTCCATTGCATTTGGGTAAATGTAACATTGCTGGCTGGCTTCTGGGAAATCCAGAGTGTGAATCACTCTCCACAGCAAGCTCATGGTCCTACATTGTGGAAGCATCTAATTCAGACAATGGGACGTGTTACCCAGGAGATTTCATCAATTATGAGGAGCTAAGAGAGCAGTTGAGCTCAGTGTCATCATTTGAAAGATTTGAGATATTCCCCAAGACAAGTTCATGGCCCAATCATGACACGAACAGAGGTGTTACGGCAGCATGTCCTCATGCTGGGACAAACAGCTTCTACAGAAATTTAATATGGCTAGTAAAAAAGGGAAATTCATACCCAAAGATCAACAAATCCTACATTAACAATAAAGAGAAGGAAGTTCTCGTGCTATGGGCCATTCACCATCCATCTACCAGTGCCGACCAACAAAGTCTCTACCAAAATGCAGATGCCTATGTTTTTGTGGGGTCATCAAGATACAGCAGGAAGTTCGAGCCAGAAATAGCAACAAGACCCAAGGTGAGGGACCAAGCAGCGAGAATGAACTATTACTGGACACTAGTAGAGCCTGGAGACAAGATAACATTCGAAGCAACTGGAAATCTAGTGGTACCGAGATATGCCTTCGCATTGAAAAGAAATTCTGGATCTGGTATTATCATTTCAGATACATCAGTCCACGATTGTGATACGATTTGTCAGACACCCAATGGTGCTATAAACACCAGCCTCCCATTTCAAAATATACATCCAGTCACAATTGGAGAATGTCCAAAATATGTAAAAAGTACTAAACTGAGAATGGCCACAGGATTAAGGAATATCCCGTCTATTCAATCTAGAGGCCTGTTTGGGGCCATTGCTGGCTTTATCGAAGGGGGCTGGACAGGAATGATAGATGGATGGTACGGTTATCACCATCAAAATGAGCAGGGATCAGGATATGCAGCCGACCTGAAGAGCACACAGAATGCCATTGACGGGATCACTAACAAGGTAAATTCTGTTATTGAAAAGATGAACACACAATTCACGGCAGTAGGTAAAGAGTTCAGCCACTTGGAAAGAAGAATAGAGAATTTAAATAAAAAGGTTGATGATGGTTTTCTAGATATTTGGACTTACAATGCCGAACTGTTGGTTCTATTGGAAAATGAAAGGACTTTGGATTACCACGACTCAAATGTGAAAAACTTATATGAAAAAGTAAGAAGCCAACTAAAAAACAATGCCAAGGAAATTGGAAATGGCTGCTTTGAATTTTACCACAAATGTGATGACACGTGCATGGAAAGCGTCAAAAATGGAACTTATGATTACCCTAAATACTCAGAGGAAGCAAAACTAAACAGAGAGGAAATAGATGGGGTAAAGTTGGAATCAACAAGGATTTACCAAATTTTGGCGATCTATTCAACGGTCGCCAGTTCATTGGTACTGGTAGTCTCCCTGGGGGCAATCAGTTTTTGGATGTGCTCTAATGGGTCGCTACAGTGCAGAATATGTATTTAA"
HA_H1_pro="MKAILVVLLYTFTTANADTLCIGYHANNSTDTVDTVLEKNVTVTHSVNLLENRHNGKLCKLRGVAPLHLGKCNIAGWLLGNPECESLSTASSWSYIVEASNSDNGTCYPGDFINYEELREQLSSVSSFERFEIFPKTSSWPNHDTNRGVTAACPHAGTNSFYRNLIWLVKKGNSYPKINKSYINNKEKEVLVLWAIHHPSTSADQQSLYQNADAYVFVGSSRYSRKFEPEIATRPKVRDQAARMNYYWTLVEPGDKITFEATGNLVVPRYAFALKRNSGSGIIISDTSVHDCDTICQTPNGAINTSLPFQNIHPVTIGECPKYVKSTKLRMATGLRNIPSIQSRGLFGAIAGFIEGGWTGMIDGWYGYHHQNEQGSGYAADLKSTQNAIDGITNKVNSVIEKMNTQFTAVGKEFSHLERRIENLNKKVDDGFLDIWTYNAELLVLLENERTLDYHDSNVKNLYEKVRSQLKNNAKEIGNGCFEFYHKCDDTCMESVKNGTYDYPKYSEEAKLNREEIDGVKLESTRIYQILAIYSTVASSLVLVVSLGAISFWMCSNGSLQCRICI*"
HA_H3_seq="ATGAAGACTATCATTGCTTTGAGCCACATTCTATGTCTGGTTTTCGCTCAAAAACTTCCTGGTAATGACAACAACATGGCAACGCTGTGCCTTGGACACCATGCAGTGCCAAACGGAACGATAGTGAAAACAATCACGAATGACCAAATTGAAGTTACTAATGCTACTGAGCTGGTTCAGAGTTTCTCTACAGGTGAAATATGCAACAGTCCTCATCAGATCCTTGATGGAGAAAACTGCACACTAATAGATGCTCTATTGGGAGATCCTCAGTGTGATGGCTTCCAAAACAATAAATGGGACCTTTTTGTTGAACGAAGCAAAGCCCACAGCAACTGTTACCCTTATGATGTGCCGGATTATGCTTCCCTTAGGTCACTAGTTGCCTCATCCGGTACACTGGAGTTTAACAATGAAAGCTTCAATTGGACTGGAGTAACTCAAGACGGAGCAAGCTCTGCTTGCAAAAGGAGATCCAGCAAAAGTTTCTTTAGTAGATTGAATTGGTTGACTCACTTAAACTTCAAATACCCAGCATTGGAAGTGACTATGCCAAACAATGAACAATTTGACAAATTGTACATTTGGGGGGTTCACCACCCGGCTACGGACAAGGACCAAATCTCCCTGTATGCTCAAGCAGCAGGAAGAATCATAGTATCTACCAAAAGAAGCCAACAAGCTGTAATTCCGAATATCGGGTCTAGACCCAGAGTAAGGGATATCCCTAGCAGAATAAGCATCTATTGGACAATAGTAAGACCGGGAGACATACTTTTGATTAACAGCACAGGGAATCTAATTGCTCCTAGGGGTTACTTCAAAATACGAAGTGGGAAAAGCTCAATAATGAGATCAGATGCACCCATTGGCAAATGCAATTCTGCATGCATCACTCCAAATGGAAGCATTCCCAATGACAAACCATTCCAAAATGTAAACAGGATCACATACGGGGCCTGTCCCAGATATGTTAAGCAAAACACTCTGAAATTGGCAACAGGAATGAGAAATATACCAGAGAAACAAACTAGAGGCATATTTGGCGCAATAGCTGGTTTCATAGAAAATGGTTGGGAGGGAATGGTGGATGGTTGGTACGGTTTCAGGCATCAAAATTCTGAGGGAAGGGGACAAGCAGCAGATCTCAAAAGCACTCAAGCAGCAATCGATCAAATTAATGGGAAGTTGAATAGATTGATCGGAAAAACCAACGAGAAATTCCATCAGATCGAAAAAGAATTTTCAGAAGTCGAAGGGAGAATTCAGGACCTTGAGAAATATGTTGAGGACACTAAAATAGATCTCTGGTCATACAACGCGGAACTTCTTGTTGCCCTGGAGAACCAGCACACAATTGATCTAACTGACTCAGAAATGAACAAATTGTTTGAAAAAACAAAGAAGCAACTGAGGGAAAATGCTGAGGATATGGGCAATGGCTGTTTCAAAATATACCACAAATGTGACAATGCCTGCATAGGATCAATCAGAAACGGAACTTATGACCACGATGTGTACAGAGATGAAGCATTAAACAACCGATTCCAGATCAAGGGAGTTGAGATGAAGTCAGAGTACAAAGATTGGATTCTATGGATTTCCTTTGCCATATCATGCTTTTTGCTTTGTGTTGCTTTGTTGGGGTTCATCATGTGGGCCTGCCAAAAAGGCAACATTAAGTGCAACATTTGCATTTGA"
HA_H3_pro="MKTIIALSHILCLVFAQKLPGNDNNMATLCLGHHAVPNGTIVKTITNDQIEVTNATELVQSFSTGEICNSPHQILDGENCTLIDALLGDPQCDGFQNNKWDLFVERSKAHSNCYPYDVPDYASLRSLVASSGTLEFNNESFNWTGVTQDGASSACKRRSSKSFFSRLNWLTHLNFKYPALEVTMPNNEQFDKLYIWGVHHPATDKDQISLYAQAAGRIIVSTKRSQQAVIPNIGSRPRVRDIPSRISIYWTIVRPGDILLINSTGNLIAPRGYFKIRSGKSSIMRSDAPIGKCNSACITPNGSIPNDKPFQNVNRITYGACPRYVKQNTLKLATGMRNIPEKQTRGIFGAIAGFIENGWEGMVDGWYGFRHQNSEGRGQAADLKSTQAAIDQINGKLNRLIGKTNEKFHQIEKEFSEVEGRIQDLEKYVEDTKIDLWSYNAELLVALENQHTIDLTDSEMNKLFEKTKKQLRENAEDMGNGCFKIYHKCDNACIGSIRNGTYDHDVYRDEALNNRFQIKGVEMKSEYKDWILWISFAISCFLLCVALLGFIMWACQKGNIKCNICI*"
NA_H1_seq="ATGAATACAAATCAAAGAATAATAACCATTGGGACAGTTTGCATGATAGTTGGAATAATCAGTCTATTGTTACAGATAGGAAACATAGTCTCGTTATGGATTAGTCATTCAATTCAGACCGGATGGGAAAATCACACTGAGATGTGCAACCAAAGTGTCATTACATATGTAAATAACACATGGGTGAACCGAACTTATGTGAACATCAGCAATACCAACATTGCTACTATACAGGATGTGACTTCGATTATACTAGCCGGCAATTCCTCACTTTGCCCAGTAAGTGGATGGGCTATATACAGCAAAGACAATAGCATAAGGATTGGTTCTAAAGGGGACATTTTTGTCATAAGAGAACCATTCATTTCATGCTCTCAATTGGAATGCAGAACCTTTTTTCTGACCCAAGGTGCTTTGCTGAATGACAAACATTCTAATGGAACCGTCAAGGACAGGAGCCCCTATAGAACCCTGATGAGCTGCCCCATCGGTGAAGCTCCATCTCCGTACAACTCAAGGTTCGAATCAGTTGCTTGGTCAGCAAGTGCATGCCATGATGGGATGGGATGGCTAACAATCGGGATCTCTGGTCCAGATAATGGAGCAGTAGCTGTTTTAAAATACAACGGTATAATAACAGATACAATAAAAAGTTGGAGAAACAAAATATTAAGAACACAAGAGTCGGAATGTGTTTGTATGAACGGTTCTTGTTTTACTGTATTAACTGATGGCCCAAGCAATGGGCAAGCCTCGTACAAAATATTTAAAGTAGAAAAAGGAAAAATTATTAAGTCAATTGAGCTGGATGCCCCCAATTACCATTATGAGGAATGCTCATGTTATCCTGATACAGGCAAAGTAATGTGTGTTTGCAGAGACAATTGGCATGCCTCGAACCGGCCATGGGTCTCTTTCAATCAGAATCTTGACTATCAAATAGGATACATATGCAGTGGAGTTTTCGGTGATAACCCGCGCTCTAATGATGGGAAGGGCAATTGTGGCCCAGTACTTTCTAATGGAGCAAATGGAGTAAAAGGATTCTCATATAAATATGGTAATGGTGTTTGGATAGGAAGAACTAAGAGTATCAACTCCAGAAGTGGGTTTGAAATGATTTGGGATCCAAATGGGTGGACTGAAACTGATAGTAGTTTCTCTACGAAGCAGGACATTATAGCATTAACTGATTGGTCAGGATACAGTGGAAGTTTTGTCCAACATCCTGAATTAACAGGAATGAATTGCATAAGGCCTTGTTTCTGGGTGGAATTAATCAGAGGGCAACCCAAGGAAAGCACAATCTGGGCTAGCGGAAGCAGCATCTCTTTCTGTGGCGTAAATAGTGAAACCGCAAGCTGGTCATGGCCAGACGGAGCTGATCTGCCATTCACCATTGACAAGTAG"
NA_H1_pro="MNTNQRIITIGTVCMIVGIISLLLQIGNIVSLWISHSIQTGWENHTEMCNQSVITYVNNTWVNRTYVNISNTNIATIQDVTSIILAGNSSLCPVSGWAIYSKDNSIRIGSKGDIFVIREPFISCSQLECRTFFLTQGALLNDKHSNGTVKDRSPYRTLMSCPIGEAPSPYNSRFESVAWSASACHDGMGWLTIGISGPDNGAVAVLKYNGIITDTIKSWRNKILRTQESECVCMNGSCFTVLTDGPSNGQASYKIFKVEKGKIIKSIELDAPNYHYEECSCYPDTGKVMCVCRDNWHASNRPWVSFNQNLDYQIGYICSGVFGDNPRSNDGKGNCGPVLSNGANGVKGFSYKYGNGVWIGRTKSINSRSGFEMIWDPNGWTETDSSFSTKQDIIALTDWSGYSGSFVQHPELTGMNCIRPCFWVELIRGQPKESTIWASGSSISFCGVNSETASWSWPDGADLPFTIDK*"
NA_H3_seq="ATGAATCCAAATCAAAAGATAATAACAATTGGCTCTGTTTCTCTCATCATTGCCACAATATGTTTCCTCATGCAAATTGCTATACTAGTAACTACTGTAACGTTACATTTCAAGCAGCATGACTACAACTCCCCTCCAAACAACCAAGCAATACTGTGTGAACCAACAATAATAGAAAGAAACACAACCGAGATTGTGTATTTGACCAACACCACCATAGAGAGAGAAATATGCCCCAAACTAGCAGAATATAGAGACTGGTCAAAGCCGCAATGTAACATTACAGGATTTGCACCTTTTTCTAAGGACAATTCAATTCGGCTTTCTGCTGGTGGGGACATCTGGGTGACAAGAGAACCTTATGTGTCATGCGACCCTGACAAGTGTTATCAATTTGCCCTTGGGCAGGGAACAACATTAAACAACGGACATTCAAATAACACTGTACATGATAGGACCCCTTATCGAACCCTATTGATGAATGAATTGGGTGTTCCATTTCATTTAGGAACCAGGCAGGTGTGCATGGCATGGTCCAGCTCAAGTTGTCACGATGGGAAAGCATGGCTGCATGTTTGTGTAACTGGGAATGATAACAATGCAACAGCTAGCCTCATTTACAATGGGAGGCTTGTAGATAGTATTGGTTCATGGTCCAAAAATATACTCAGAACCCAGGAGTCAGAATGCGTCTGTATCAATGGAACCTGTACAGTAGTAATGACTGATGGGAGCGCTTCAGGAAAAGCTGATACTAAAATACTATTCGTTGAGGAGGGGAAGATCGTTCATATTAGCACATTGTCAGGAAGTGCTCAGCATGTTGAGGAGTGCTCCTGTTATCCTCGATTTCCTGGTGTCAGATGTGTCTGCAGAGACAACTGGAAAGGCTCCAATAGGCCCATTGTAGATATAAATGTAAAGAATTATAGCATTGTTTCCAGTTATGTATGCTCAGGACTTGTTGGAGACACACCCAGAAAAAGCGACAGCGTCAGCAGTAGCCATTGCCTAGATCCTAACAATGAAAAAGGTGGTCATGGGGTGAAAGGCTGGGCCTTTGATGATGGAAATGACGTGTGGATGGGAAGGACAATCAACGAGACGTTACGCTTAGGTTATGAAACTTTCAAAGTCATTGAAGGCTGGTCCAAAGCTAACTCCAAATTACAGACAAATAGGCAAGTCATAGTTGAAAAAGGTGACAGGTCCGGTTATTCTGGTATTTTCTCCGTTGAAAGTAAAAGCTGCATCAATCGGTGCTTTTATGTGGAGTTGATAAGGGGAAGGAAAGAGGAAACTAAAGTCTGGTGGACCTCAAACAGTATTGTTGTGTTTTGTGGCACCTCAGGTACATATGGAACAGGCTCATGGCCTGATGGAGCGGATATCAATCTCATGCCTATGTAA"
NA_H3_pro="MNPNQKIITIGSVSLIIATICFLMQIAILVTTVTLHFKQHDYNSPPNNQAILCEPTIIERNTTEIVYLTNTTIEREICPKLAEYRDWSKPQCNITGFAPFSKDNSIRLSAGGDIWVTREPYVSCDPDKCYQFALGQGTTLNNGHSNNTVHDRTPYRTLLMNELGVPFHLGTRQVCMAWSSSSCHDGKAWLHVCVTGNDNNATASLIYNGRLVDSIGSWSKNILRTQESECVCINGTCTVVMTDGSASGKADTKILFVEEGKIVHISTLSGSAQHVEECSCYPRFPGVRCVCRDNWKGSNRPIVDINVKNYSIVSSYVCSGLVGDTPRKSDSVSSSHCLDPNNEKGGHGVKGWAFDDGNDVWMGRTINETLRLGYETFKVIEGWSKANSKLQTNRQVIVEKGDRSGYSGIFSVESKSCINRCFYVELIRGRKEETKVWWTSNSIVVFCGTSGTYGTGSWPDGADINLMPM*"
PB2_H1_seq="ATGGAGAGAATAAAAGAACTAAGAGATCTAATGTCGCAGTCCCGCACTCGCGAGATACTCACTAAGACCACTGTGGACCACATGGCCATAATCAAAAAGTACACATCAGGAAGGCAAGAGAAAAACCCCGCACTCAGAATGAAGTGGATGATGGCAATGAGATACCCAATTACAGCAGACAAGAGAATAATGGACATGATTCCAGAAAGGAATGAACAAGGACAAACCCTCTGGAGCAAAACAAACGATGCTGGATCGGACCGTGTGATGGTATCACCCCTGGCCGTAACATGGTGGAATAGAAATGGCCCAACAACAAGCACAGTCCACTACCCTAAGGTATATAAAACTTATTTTGAAAAGGTCGAAAGATTAAAACATGGTACCTTTGGCCCTGTCCACTTCAGAAACCAAGTTAAAATAAGACGGAGGGTTGACACAAACCCTGGTCATGCGGATCTCAGTGCCAAGGAGGCACAGGATGTGATCATGGAGGTTGTTTTCCCAAATGAAGTGGGGGCAAGAATACTGACATCAGAGTCACAGCTGGCAATAACAAAAGAAAAGAAAGAAGAGCTCCAGGATTGTAAAATTGCTCCCTTAATGGTGGCATACATGCTAGAAAGAGAGTTGGTTCGTAAGACGAGGTTTCTCCCAGTGGCTGGTGGAACCAGCAGTGTTTATATTGAAGTGCTGCACTTAACTCAGGGAACATGCTGGGAGCAAATGTACACTCCAGGAGGAGAAGTGAGAAATGATGATGTTGACCAAAGTTTGATTATCGCTGCTAGAAACATAGTAAGAAGAGCAGCAGTGTCAGCAGACCCATTAGCGTCTCTCTTGGAAATGTGCCACAGCACACAGATTGGAGGAATAAGGATGGTGGACATCCTTAGACAGAACCCAACAGAGGAACAAGCCGTGGACATATGCAAGGCAGCAATGGGGCTGAGGGTTAGCTCCTCTTTCAGCTTTGGTGGGTTCACCTTCAAAAGGACAAGCGGGTCATCTGTTAAGAAAGAAGAAGAAGTGCTAACGGGCAACCTCCAAACACTGAAAATAAGAGTACATGAAGGATATGAAGAATTCACAATGGTCGGGAGAAGAGCAACAGCTATTCTCAGAAAAGCAACCAGGAGATTGATCCAGTTAATAGTAAGTGGGAGAGACGATCAATCGGTTGCTGAGGCATTAATTGTAGCCATGGTATTTTCACAAGAGGATTGCATGATCAAGGCAGTTAGGGGCGATTTGAACTTTGTCAATAGGGCAAACCAGCGGCTGAATCCCATGCACCAGCTCTTGAGGCATTTCCAAAAAGATGCAAAAGTGCTTTTCCAGAACTGGGGAATTGAACCCATCGACAGTGTAATGGGAATGATCGGGATATTGCCTGATATGGCCCCAAGCACGGAAATGTCGCTGAGAGGTATAAGAGTCAGCAAAATGGGGGTAGATGAGTATTCCAGCACGGAGAGAGTGGTAGTGAGCATTGACCGATTTTTGAGAGTTCGGGATCAAAGAGGGAACGTACTATTGTCTCCCGAAGAGGTCAGCGAGACACAGGGAACTGAGAAATTGACAATAACTTATTCGTCGTCAATGATGTGGGAGATCAACGGTCCTGAGTCAGTGCTGGTCAACACTTATCAATGGATCATAAGGAACTGGGAAAGCTTGAAAAATCAATGGTCACAAGATCCCACGATGTTATACAACAAAATGGAATTTGAACCATTCCAGTCTCTTGTCCCTAAGGCAACCAGAAGTCGTTACAGTGGATTCGTGAGGACACTGTTCCAGCAAATGCGGGATGTGCTTGGAACATTTGACACTGTCCAAATAATAAAACTTCTCCCCTTTGCTGCTGCCCCACCGGAACAGAGTAGGATGCAGTTCTCCTCGCTGACTGTGAACGTGAGAGGATCAGGGCTGAGGATACTGGTAAGAGGCAACTCTCCAGTGTTCAATTACAACAAAGCAACCAAAAGGCTTACAATTCTTGGAAAAGATGCAGGTGCATTGACTGAAGATCCAGATGAAGGCACAGCTGGAGTGGAGTCTGCTGTCCTGAGGGGATTCCTCATTTTGGGTAAGGAAGACAAGAGATATGGCCCAGCATTAAGCATCAATGAACTGAGCAATCTTGCAAAGGGAGAGAAGGCTAATGTGCTAATTGGGCAAGGGGACGTGGTGTTGGTAATGAAACGGAAACGGGACTCTAGCATACTTACTGACAGCCAGACAGCGACCAAAAGAATTCGGATGGCCATCAATTAG"
PB2_H1_pro="MERIKELRDLMSQSRTREILTKTTVDHMAIIKKYTSGRQEKNPALRMKWMMAMRYPITADKRIMDMIPERNEQGQTLWSKTNDAGSDRVMVSPLAVTWWNRNGPTTSTVHYPKVYKTYFEKVERLKHGTFGPVHFRNQVKIRRRVDTNPGHADLSAKEAQDVIMEVVFPNEVGARILTSESQLAITKEKKEELQDCKIAPLMVAYMLERELVRKTRFLPVAGGTSSVYIEVLHLTQGTCWEQMYTPGGEVRNDDVDQSLIIAARNIVRRAAVSADPLASLLEMCHSTQIGGIRMVDILRQNPTEEQAVDICKAAMGLRVSSSFSFGGFTFKRTSGSSVKKEEEVLTGNLQTLKIRVHEGYEEFTMVGRRATAILRKATRRLIQLIVSGRDDQSVAEALIVAMVFSQEDCMIKAVRGDLNFVNRANQRLNPMHQLLRHFQKDAKVLFQNWGIEPIDSVMGMIGILPDMAPSTEMSLRGIRVSKMGVDEYSSTERVVVSIDRFLRVRDQRGNVLLSPEEVSETQGTEKLTITYSSSMMWEINGPESVLVNTYQWIIRNWESLKNQWSQDPTMLYNKMEFEPFQSLVPKATRSRYSGFVRTLFQQMRDVLGTFDTVQIIKLLPFAAAPPEQSRMQFSSLTVNVRGSGLRILVRGNSPVFNYNKATKRLTILGKDAGALTEDPDEGTAGVESAVLRGFLILGKEDKRYGPALSINELSNLAKGEKANVLIGQGDVVLVMKRKRDSSILTDSQTATKRIRMAIN*"
PB2_H3_seq="ATGGAGAGAATAAAAGAACTAAGAGATCTAATGTCGCAGTCCCGCACTCGCGAGATACTCACTAAAACCACTGTGGACCATATGGCCATAATCAAAAAGTACACATCAGGAAGGCAGGAGAAGAACCCTGCACTCAGAATGAAGTGGATGATGGCAATGAAATACCCAATTACAGCGGACAGGAGAATAATGGACATGATTCCAGAGAGGAATGAACAAGGACAAACCCTCTGGAGCAAAACAAACGATGCTGGATCGGACCGTGTAATGGTATCACCCCTGGCCGTAACATGGTGGAATAGGAATGGCCCAACAACAAGCACAGTTCACTACCCTAAGGTATACAAAACTTATTTCGAAAAAGTCGAAAGGTTAAAACATGGTACCTTTGGCCCTGTCCATTTCAGAAATCAAGTTAAAATAAGGAGGAGGGTTGACACAAACCCTGGTCATGCAGATCTTAGTGCCAAGGAGGCACAGGATGTGATCATGGAAGTTGTTTTCCCAAATGAAGTGGGGGCAAGAATACTGACATCAGAGTCACAACTGACAATAACGAAAGAAAAGAAAGAAGAGCTCCAGGATTGTAAAATTGCTCCCTTGATGGTGGCATACATGCTAGAAAGAGAATTGGTTCGCAAGACGAGGTTTCTTCCGGTGGCTGGTGGAACAAGCAGTGTTTATATTGAAGTGTTGCACTTAACTCAGGGAACATGCTGGGAGCAAATGTACACTCCAGGAGGAGAAGTGAGAAATGATGATGTTGACCAAAGTTTGATTATCGCCGCTAGGAACATAGTAAGAAGAGCAGCAGTGTCAGCAGACCCATTAGCATCTCTCTTGGAAATGTGCCACAGCACACAAATTGGAGGAATACGGATGGTGGACATCCTTAGGCAGAACCCAACGGAGGAACAGGCCGTAGACATATGCAAGGCAGCAATGGGGCTGAGGATTAGCTCCTCCTTCAGCTTTGGTGGGTTCACCTTCAAAAGGACAAGCGGATCATCTGTTAAGAAAGAAGAAGAAGTGCTCACGGGCAACCTCCAAACACTGAAAATAAGAGTACATGAAGGATATGAGGAATTCACAATGGTCGGGAGAAGAGCAACAGCTATTCTCAGAAAGGCAACCAGGAGATTGATCCAGTTAATAGTAAGTGGGAGAGACGATCAGTCAATTGCTGAGGCAATAATTGTGGCCATGGTATTTTCACAAGAAGATTGCATGATCAAGGCAGTTAGGGGCGATCTGAACTTTGTCAATAGGGCAAACCAGCGACTGAATCCCATGCACCAACTCTTGAGGCATTTCCAAAAGGATGCAAAAGTGCTTTTCCAGAACTGGGGGATTGAACCCATCGACAGTGTAATGGGAATGATCGGAATATTGCCTGATATGACCCCAAGCACGGAAACGTCGCTGAGGGGTATAAGAGTCAGCAAAATGGGAGTGGATGAATATTCCAGTACGGAGAGAGTGGTAGTGAGCATTGACCGATTTTTGAGAGTTCGAGATCAACGAGGGAACGTACTATTGTCCCCCGAAGAGGTCAGCGAGACACAGGGAACTGAGAAATTGACAATAACTTATTCGTCATCAATGATGTGGGAGATCAATGGTCCTGAGTCAGTGCTGGTCAACACTTATCAGTGGATTATAAGAAACTGGGAAAGCTTGAAAATTCAATGGTCACAGGATCCCGCCATGTTATACAACAAATTGGAATTTGAACCATTCCAGTCTCTTGTCCCTAAGGCAACCAGAAGTCGTTACAGTGGATTCGTGAGGACACTGTTCCAGCAAATGAGGGATGTGCTTGGAACATTTGATACTGTCCAAATAATAAAACTTCTCCCCTTTGCTGCTGCTCCACCGGAACAGAGTAGGATGCAGTTCTCCTCGCTGACTGTGAATGTGAGAGGATCAGGACTGAGGATACTGGTAAGAGGCAACTCTCCAGTGTTCAATTACAACAAAGCAACCAAAAGGCTTACAATCCTTGGAAAAGATGCAGGTGCATTGACTGACGACCCAGACGAAGGCACAGCTGGAGTGGAGTCTGCTGTCCTGAGGGGCTTCCTCATTTTGGGTAAAGAAGACAAGAGATATGGCCCAGCATTAAGCATCAATGAACTGAGCAATCTTGCAAAAGGAGAGAAGGCTAATGTGCTAATTGGGCAAGGAGACGTGGTGTTGGTAATGAAACGGAAACGGGACTCTAGCATACTTACTGACAGCCAGACAGCGACCAAAAGGATTCGGATGGCCATCAATTAG"
PB2_H3_pro="MERIKELRDLMSQSRTREILTKTTVDHMAIIKKYTSGRQEKNPALRMKWMMAMKYPITADRRIMDMIPERNEQGQTLWSKTNDAGSDRVMVSPLAVTWWNRNGPTTSTVHYPKVYKTYFEKVERLKHGTFGPVHFRNQVKIRRRVDTNPGHADLSAKEAQDVIMEVVFPNEVGARILTSESQLTITKEKKEELQDCKIAPLMVAYMLERELVRKTRFLPVAGGTSSVYIEVLHLTQGTCWEQMYTPGGEVRNDDVDQSLIIAARNIVRRAAVSADPLASLLEMCHSTQIGGIRMVDILRQNPTEEQAVDICKAAMGLRISSSFSFGGFTFKRTSGSSVKKEEEVLTGNLQTLKIRVHEGYEEFTMVGRRATAILRKATRRLIQLIVSGRDDQSIAEAIIVAMVFSQEDCMIKAVRGDLNFVNRANQRLNPMHQLLRHFQKDAKVLFQNWGIEPIDSVMGMIGILPDMTPSTETSLRGIRVSKMGVDEYSSTERVVVSIDRFLRVRDQRGNVLLSPEEVSETQGTEKLTITYSSSMMWEINGPESVLVNTYQWIIRNWESLKIQWSQDPAMLYNKLEFEPFQSLVPKATRSRYSGFVRTLFQQMRDVLGTFDTVQIIKLLPFAAAPPEQSRMQFSSLTVNVRGSGLRILVRGNSPVFNYNKATKRLTILGKDAGALTDDPDEGTAGVESAVLRGFLILGKEDKRYGPALSINELSNLAKGEKANVLIGQGDVVLVMKRKRDSSILTDSQTATKRIRMAIN*"
PB1_H1_seq="ATGGATGTCAATCCGACCCTACTTTTCTTAAAGGTTCCAGCGCAAAATGCCATAAGCACCACATTCCCTTATACTGGAGATCCCCCATACAGCCATGGAACAGGAACAGGATACACCATGGACACAGTCAACAGAACACACCAATATTCAGAAAAAGGGAAATGGACGACAAACACAGAGACTGGGGCACCCCAGCTCAACCCGATTGATGGGCCACTACCTGAAGATAATGAACCAAGTGGATATGCACAAACAGACTGCGTCCTGGAGGCCATGGCTTTCCTTGAAGAATCTCACCCAGGGATATTTGAGAATTCATGCCTTGAAACGATAGAAATTGTCCAACAAACAAGGGTGGATAAACTAACTCAAGGTCGCCAGACTTATGATTGGACATTAAACAGGAATCAACCGGCAGCAACTGCATTGGCCAACACCATAGAAGTTTTTAGATCAAATGGTCTAACAGCTAACGAATCAGGAAGGCTAATAGATTTCCTAAAGGATGTAATGGAATCAATGGATAAAGAGGAAATAGAGATAACAACACATTTTCAACGAAAAAGGAGAGTGAGAGACAACATGACCAAGAAGATGGTCACACAAAGAACAATAGGGAAGAAAAAACAAAGAATGAATAAGAGAAGTTATCTAATAAGAGCATTGACATTGAACACGATGACCAAAGATGCAGAGAGAGGCAAATTAAAAAGGAGGGCTATCGCAACACCTGGGATGCAAATCAGAGGGTTCGTGTATTTTGTTGAGACTTTAGCTAGAAGCATTTGTGAAAAACTTGAACAGTCCGGACTCCCAGTAGGGGGCAATGAAAAGAAAGCCAAATTGGCAAATGTTGTAAGAAAGATGATGACTAATTCACAAGACACAGAGCTTTCTTTCACAATCACTGGGGACAACACTAAATGGAATGAAAACCAAAATCCCCGAATGTTTCTGGCAATGATTACATACATCACCAGAAATCAACCCGAGTGGTTTAGAAACATCCTGAGCATGGCACCCATAATGTTCTCAAATAAAATGGCAAGACTAGGAAAAGGGTACATGTTCGAGAGTAAAAGAATGAAACTCCGAACACAGATACCAGCAGAAATGCTAGCAAGCATTGACCTGAAGTATTTCAATGAATCAACAAGGAAGAAAATTGAGAAAATAAGGCCTCTACTAATAGATGGCACAGCATCATTGAGCCCTGGGATGATGATGGGCATGTTCAACATGCTAAGTACGGTTTTGGGAGTCTCGATATTGAATCTTGGACAAAAGAAATACACCAGGACAACATATTGGTGGGATGGACTCCAATCCTCCGACGATTTTGCCCTCATAGTAAATGCACCAAATCATGAGGGAATACAAGCAGGAGTAGATAGATTCTACAGAACCTGCAAGTTAGTAGGGATCAATATGAGCAAAAAGAAGTCCTACATAAATAAGACTGGGACATTTGAATTCACAAGCTTTTTTTATCGCTATGGGTTTGTAGCTAATTTTAGCATGGAGCTGCCCAGTTTTGGAGTGTCTGGAATAAACGAATCAGCTGATATGAGTATTGGAGTAACAGTGATAAAGAACAACATGATAAACAATGATCTTGGACCTGCAACAGCTCAGATGGCACTCCAGTTGTTCATCAAAGACTACAGATACACATATAGATGCCATAGAGGGGACACACAAATTCAGACGAGAAGATCATTCGAGCTAAAGAGGCTGTGGGATCAAACCCAATCAAAGGCAGGGTTATTAGTATCTGATGGAGGACCAAATTTATACAATATCCGGAATCTTCACATTCCTGAAGTCTGCTTAAAATGGGAGCTAATGGATGAGGATTATCGGGGAAGGCTTTGTAATCCCCTGAATCCCTTTGTCAGTCATAAAGAGATTGATTCTGTAAACAGTGCTGTGGTGATGCCAGCCCATGGTCCAGCCAAAAGCATGGAATATGATGCCGTTGCAACTACACACTCCTGGATTCCCAAGAGGAACCGCTCCATTCTCAACACAAGCCAAAGGGGAATTCTCGAGGATGAACAGATGTACCAGAAGTGCTGCAACCTGTTCGAGAAATTTTTCCCTAGTAGTTCATACAGGAGACCGGTTGGAATTTCTAGCATGGTGGAGGCCATGGTGTCTAGGGCCCGGATTGATGCCAGGATTGACTTCGAATCTGGACGGATTAAGAAAGAAGAGTTCTCTGAGATCATGAAGATCTGTTCCACCATTGAAGAACTCAGACGGCAAAAGTAA"
PB1_H1_pro="MDVNPTLLFLKVPAQNAISTTFPYTGDPPYSHGTGTGYTMDTVNRTHQYSEKGKWTTNTETGAPQLNPIDGPLPEDNEPSGYAQTDCVLEAMAFLEESHPGIFENSCLETIEIVQQTRVDKLTQGRQTYDWTLNRNQPAATALANTIEVFRSNGLTANESGRLIDFLKDVMESMDKEEIEITTHFQRKRRVRDNMTKKMVTQRTIGKKKQRMNKRSYLIRALTLNTMTKDAERGKLKRRAIATPGMQIRGFVYFVETLARSICEKLEQSGLPVGGNEKKAKLANVVRKMMTNSQDTELSFTITGDNTKWNENQNPRMFLAMITYITRNQPEWFRNILSMAPIMFSNKMARLGKGYMFESKRMKLRTQIPAEMLASIDLKYFNESTRKKIEKIRPLLIDGTASLSPGMMMGMFNMLSTVLGVSILNLGQKKYTRTTYWWDGLQSSDDFALIVNAPNHEGIQAGVDRFYRTCKLVGINMSKKKSYINKTGTFEFTSFFYRYGFVANFSMELPSFGVSGINESADMSIGVTVIKNNMINNDLGPATAQMALQLFIKDYRYTYRCHRGDTQIQTRRSFELKRLWDQTQSKAGLLVSDGGPNLYNIRNLHIPEVCLKWELMDEDYRGRLCNPLNPFVSHKEIDSVNSAVVMPAHGPAKSMEYDAVATTHSWIPKRNRSILNTSQRGILEDEQMYQKCCNLFEKFFPSSSYRRPVGISSMVEAMVSRARIDARIDFESGRIKKEEFSEIMKICSTIEELRRQK*"
PB1_H3_seq="ATGGATGTCAATCCGACCCTACTTTTCTTAAAGGTTCCAGCGCAAAATGCCATAAGCACCACATTCCCTTATACTGGAGATCCCCCATACAGCCATGGAACAGGAACAGGATACACCATGGACACAGTCAACAGAACACACCAATATTCAGAAAAAGGGAAATGGACGACAAACACAGAGACTGGGGCACCCCAACTCAACCCGATCGATGGGCCACTACCTGAAGATAATGAACCAAGTGGATATGCACAAACAGACTGTGTCTTGGAGGCCATGGCTTTCCTTGAAGAATCTCACCCAGGGATATTTGAGAATTCATGCCTTGAAACGATAGAAATCGTCCAACAAACAAGGGTGGATAAACTAACTCAAGGTCGCCAGACTTATGATTGGACATTAAACAGGAATCAACCGGCTGCAACTGCATTGGCCAACACCATAGAAGTTTTTAGATCAAATGGTCTAACAGCTAACGAATCAGGAAGGCTAATAGATTTCCTAAAGGATGTAATGGAATCAATGGATAAAGAGGAAATAGAGATGACAACCCATTTTCAAAGAAAAAGGAGGATGAGAGACAACATGACCAAGAAGATGGTCACACAAAGGACAATAGGAAAGAAAAAACAAAGAATGAATAAGAGAAGTTACCTAATAAGAGCATTGACGTTGAACACGATGACCAAAGATGCAGAGAGAGGTAAATTAAAAAGGAGGGCTATCGCAACACCTGGGATGCAAATCAGAGGGTTCGTGTATTTTGTTGAGACTTTAGCTAGAAGCATTTGTGAAAAACTTGAACAGTCCGGACTCCCAGTAGGGGGCAATGAAAAGAAAGCCAAATTGGCAAATGTTGTAAGAAAGATGATGACTAATTCACAAGACACAGAGCTCTCTTTCACAATCACTGGGGACAACACTAAATGGAATGAAAACCAGAATCCTCGAATGTTTCTGGCAATGATTACATACATCACCAGGAATCAACCCGAGTGGTTTAGAAACATTCTGAGCATGGCACCCATAATGTTCTCAAATAAAATGGCAAGACTAGGAAAAGGGTACATGTTCGAGAGTAAAAAAATGAAACTCCGAACACAGATACCAGCAGAAATGCTAGCAAGCATTGACCTGAAGTATTTCAATGAATCAACAAGGAAGAAAATTGAGAAAATAAGGCCTCTACTAATAGATGGCACAGCATCACTGAGCCCTGGGATGATGATGGGCATGTTCAACATGCTAAGTACGGTTTTGGGAGTATCGATATTGAATCTTGGACAAAAGAAATACACCAGGACAACATATTGGTGGGATGGACTCCAATCCTCCGACGATTTTGCCCTCATAGTAAATGCACCAAATCATGAGGGAATACAAGCAGGAGTAGATAGATTCTACAGAACCTGCAAGTTAGTAGGAATCAATATGAGCAAAAAGAAGTCCTACATAAATAAGACTGGGACATTTGAATTCACAAGCTTTTTTTATCGCTATGGGTTTGTAGCTAATTTTAGCATGGAGCTGCCCAGTTTTGGAGTGTCTGGAATAAACGAATCAGCTGATATGAGTATTGGAGTAACAGTGATAAAGAACAACATGATAAACAATGATCTTGGACCTGCAACAGCTCAGATGGCGCTTCAGTTGTTCATCAAAGACTACAGATACACATATAGATGCCATAGAGGGGACACACAAATTCAGACGAGAAGATCATTCGAGCTAAAAAAGCTGTGGGATCAAACCCAATCAAAGGCAGGGTTATTAGTGTCTGATGGAGGGCCAAATTTATACAATATTCGGAATCTTCACATTCCTGAAGTCTGCTTAAAATGGGAGCTAATGGATGAGGATTATCGGGGAAGGCTTTGTAATCCCCTGAATCCCTTTGTCAGTCATAAAGAGATTGATTCTGTAAACAGTGCTGTGGTGATGCCATCCCATGGTCCAGCCAAAAGCATGGAATATGATGCCGTTGCAACTACACACTCCTGGATTCCCAAGAGGAACCGCTCTATTCTCAACACAAGCCAAAGGGGAATCCTCGAGGATGAACAGATGTACCAGAAGTGCTGCAACCTGTTCGAGAAATTTTTCCCTAGTAGTTCATACAGGAGACCGGTTGGAATTTCTAGCATGGTAGAGGCCATGGTGTCTAGGGCTCGGATTGATGCCAGGATTGACTTCGAGTCTGGACGGATTAAGAAAGAAGAGTTCTCTGAGATCATGAAGATCTGTTCCACCATTGAAGAACTCAGACGGCAAAAGTAA"
PB1_H3_pro="MDVNPTLLFLKVPAQNAISTTFPYTGDPPYSHGTGTGYTMDTVNRTHQYSEKGKWTTNTETGAPQLNPIDGPLPEDNEPSGYAQTDCVLEAMAFLEESHPGIFENSCLETIEIVQQTRVDKLTQGRQTYDWTLNRNQPAATALANTIEVFRSNGLTANESGRLIDFLKDVMESMDKEEIEMTTHFQRKRRMRDNMTKKMVTQRTIGKKKQRMNKRSYLIRALTLNTMTKDAERGKLKRRAIATPGMQIRGFVYFVETLARSICEKLEQSGLPVGGNEKKAKLANVVRKMMTNSQDTELSFTITGDNTKWNENQNPRMFLAMITYITRNQPEWFRNILSMAPIMFSNKMARLGKGYMFESKKMKLRTQIPAEMLASIDLKYFNESTRKKIEKIRPLLIDGTASLSPGMMMGMFNMLSTVLGVSILNLGQKKYTRTTYWWDGLQSSDDFALIVNAPNHEGIQAGVDRFYRTCKLVGINMSKKKSYINKTGTFEFTSFFYRYGFVANFSMELPSFGVSGINESADMSIGVTVIKNNMINNDLGPATAQMALQLFIKDYRYTYRCHRGDTQIQTRRSFELKKLWDQTQSKAGLLVSDGGPNLYNIRNLHIPEVCLKWELMDEDYRGRLCNPLNPFVSHKEIDSVNSAVVMPSHGPAKSMEYDAVATTHSWIPKRNRSILNTSQRGILEDEQMYQKCCNLFEKFFPSSSYRRPVGISSMVEAMVSRARIDARIDFESGRIKKEEFSEIMKICSTIEELRRQK*"
PB1_F2_H1_pro="MEQEQDTPWTQSTEHTNIQKKGNGRQTQRLGHPSSTRLMGHYLKIMNQVDMHKQTASWRPWLSLKNLTQGYLRIHALKR"
PB1_F2_H3_pro="MEQEQDTPWTQSTEHTNIQKKGNGRQTQRLGHPNSTRSMGHYLKIMNQVDMHKQTVSWRPWLSLKNLTQGYLRIHALKR"
PA_H1_seq="ATGGAAGACTTTGTGCGACAATGCTTCAATCCAATGATCGTCGAGCTTGCGGAAAAGGCAATGAAAGAATATGGGGAAGATCCGAAAATCGAAACTAACAAGTTTGCTGCAATATGCACACATTTGGAAGTTTGTTTCATGTATTCGGATTTCCATTTCATCGACGAACGGGGTGAATCAGTAATTGTAGAATCTGGTGACCCGAATGCACTATTAAAGCACCGATTTGAAATAATTGAAGGAAGAGACCGAATCATGGCCTGGACAGTGGTGAACAGTATATGTAACACAACAGGGGTAGAGAAGCCTAAATTTCTTCCTGATTTGTATGATTACAAAGAGAACCGGTTCATTGAAATTGGAGTAACACGGAGGGAAGTCCACATATATTACCTAGAGAAAGCCAACAAAATAAAATCTGAGAAGACACACATTCACATCTTTTCATTCACTGGAGAGGAGATGGCCACCAAAGCGGACTACACCCTCGACGAAGAGAGCAGGGCAAGAATCAAAACCAGGCTTTTCACTATAAGACAAGAAATGGCCAGTAGGAGTCTATGGGATTCCTTTCGTCAGTCCGAAAGAGGCGAAGAGACAATTGAAGAAAAATTTGAGATTACAGGAACTATGCGCAAGCTTGCAGACCAAAGTCTCCCACCGAACTTCTCCAGCCTTGAAAACTTTAGAGCCTATGTAGATGGATTCGAGCCGAACGGCTGCATTGAGGGCAAGCTTTCCCAAATGTCAAAAGAAGTGAACGCCAAAATTGAACCATTCTTGAGGATGACACCACGCCCCCTCAGATTGCCTGATGGGCCTCTTTGCCATCAGCGGTCAAAGTTCCTGCTGATGGATGCTCTGAAATTAAGTATTGAAGACCCGAGTCACGAGGGGGAGGGAATACCACTATATGATGCAATCAAATGCATGAAGACATTCTTTGGCTGGAAAGAGCCTAACATAGTCAAATCACATGAGAGAGGCATAAATCCCAATTACCTCATGGCTTGGAAGCAGGTGCTAGCAGAGCTACAGGACATTGAAAATGAAGAGAAGATCCCAAGGACAAAGAACATGAAGAGAACAAGCCAATTGAAGTGGGCACTCGGTGAAAATATGGCACCAGAAAAAGTAGACTTTGATGACTGCAAAGATGTTGGAGACCTTAAACAGTATGACAGTGATGAGCCAGAGCCCAGATCTCTAGCAAGCTGGGTCCAAAATGAATTCAATAAGGCATGTGAATTGACTGATTCAAGCTGGATAGAGCTTGATGAAATAGGAGAAGATGTTGCCCCGATTGAACATATCGCAAGCATGAGAAGGAACTATTTTACAGCAGAAGTGTCCCACTGCAGGGCTACTGAATACATAATGAAGGGAGTGTACATAAATACGGCCTTGCTCAATGCATCCTGTGCAGCCATGGATGACTTTCAGCTGATCCCAATGATAAGCAAATGTAGGACCAAAGAAGGAAGACGGAAAACAAACCTGTATGGGTTCATCATAAAAGGAAGGTCTCATTTGAGAAATGATACTGATGTGGTGAACTTTGTAAGTATGGAGTTCTCACTCACTGACCCGAGACTGGAGCCACACAAATGGGAGAAATACTGTGTTCTTGAAATAGGAGACATGCTCTTGAGAACTGCGATAGGCCAAGTGTCGAGGCCCATGTTCCTATATGTGAGAACCAATGGAACCTCCAAGATCAAGATGAAATGGGGCATGGAAATGAGGCGCTGCCTTCTTCAGTCTCTTCAGCAGATTGAGAGCATGATTGAGGCCGAGTCTTCTGTCAAAGAGAAAGACATGACCAAGGAATTCTTTGAAAACAAATCGGAAACATGGCCAATCGGGGAGTCACCCAGGGGAGTGGAGGAAGGCTCTATTGGGAAAGTGTGCCGGACCTTATTGGCAAAATCTGTATTCAACAGTCTATATGCGTCTCCACAACTTGAGGGGTTTTCGGCTGAATCGAGAAAATTGCTTCTCATTGTTCAGGCACTTAGGGACAACCTGGAACCTGGAACCTTCGATCTTGGGGGGCTATATGAAGCAATCGAGGAGTGCCTGATTAATGATCCCTGGGTTTTGCTTAATGCATCTTGGTTCAACTCCTTCCTCACACATGCACTGAAGTAG"
PA_H3_seq="ATGGAAGACTTTGTGCGACAATGCTTCAATCCAATGATCGTCGAGCTTGCGGAAAAGGCAATGAAAGAGTATGGGGAAGATTCGAAAATCGAAACCAACAAGTTCGCTGCAATATGCACGCACTTGGAAGTCTGTTTCATGTATTCGGACTTCCATTTCATTGACGAACAGGGTGAATCAATTATTGTAGAATCTGGTGATCCAAATGCATTGCTGAAGCACCGATTTGAGATAATTGAAGGAAGAGACAGGACTATGGCCTGGACAGTAGTGAACAGTATCTGCAACACCACAGGGGTAGAGAAGCCTAAATTTCTTCCGGATTTATACGACTACAAAGAGAATCGATTCGTTGAAATTGGAGTGACAAGAAGGGAGGTCCACATATACTACCTAGAGAAAGCCAACAAAATAAAATCCGAGAAGACACACATTCATATTTTTTCATTCACTGGAGAGGAGATGGCCACCAAAGCAGACTACACCCTTGACGAAGAGAGCAGGGCAAGAATAAAGACCAGGCTCTTCACCATAAGACAAGAGATGGCCAGTAGGGGTCTATGGGATTCCTTTCGTCAGTCCGAGAGAGGCGAAGAGACAATTGAAGAAAGATTTGAAATTTCAGGAACCATGCGCAGGCTTGCCAACCAAAGTCTCCCACCGAACTTCTCCAGCCTTGAAAACTTTAGAGCCTATGTAGATGGATTTGAACCAAACGGCTGCATTGAGGGCAAGCTTTCTCAAATGTCAAAAGAAGTGAATGCCCAAATTGAACCATTCTTGAAGACAACACCACGCCCTCTCAGGTTGCCTGATGGGCCCCCTTGCTCTCAGCGGTCAAAGTTCTTGCTTATGGATGCTCTAAAACTAAGTATTGAAGACCCGAGTCATGAAGGAGAAGGGATACCACTATATGATGCGATCAAGTGCATGAAGACATTTTTTGGCTGGAAAGAGCCTAACATAATCAAACCCCATGAGAAAGGCATAAACCCAAATTATCTACTGGCTTGGAAGCAAGTACTAGCAGAGCTCCAGGACATAGAAAATGAAGAGAAGATCCCAAAGACAAAAAACATGAAGAGAACAAGCCAATTGAAGTGGGCACTTGGTGAGAATATGGCACCAGAGAAAGTAGATTTTGATGACTGCAAAGATGTTGGTGACCTCAAACAGTATGACAGCGATGAGCCAGAGCCTAGATCTATAGCAAGCTGGGTCCAAAATGAGTTCAACAAGGCATGTGAATTAACCGATTCAAGCTGGATGGAACTTGATGAGATAGGAGAAGATGTTGCCCCGATTGAACACATCGCAAGCATGAGGAGGAACTATTTTACGGCAGAAGTGTCCCATTGCAGGGCTACTGAATACATAATGAAGGGAGTGTACATAAATACGGCTCTCCTTAATGCATCTTGTGCAGCCATGGATGACTTTCAACTGATCCCAATGATAAGCAAATGTAGGACCAAGGAAGGGAGACGAAGGACAAATCTGTACGGCTTCATTATAAAAGGAAGGTCCCATCTGAGAAATGATACTGACGTGGTGAACTTTGTAAGCATGGAGTTCTCCCTCACTGACCCGAGGCTGGAGCCACACAAATGGGAAAAGTACTGTGTTCTTGAAATAGGAGACATGCTCCTGAGGACTGCAATAGGCCAAGTGTCGAGACCCATGTTCCTATATGTGAGGACCAATGGAACCTCCAAGATCAAGATGAAATGGGGCATGGAAATGAGGCGCTGCCTTCTCCAGTCTCTTCAGCAGATTGAGAGTATGATTGAGGCTGAGTCTTCTGTCAAAGAGAAAGACATGACCAAGGAATTCTTTGAAAACAAATCGGAAACATGGCCAATCGGAGAATCACCCAAAGGAGTGGAGGAAGGCTCCATTGGGAAAGTGTGCAGGGCCTTGCTGGCAAAATCTGTATTCAACAGTCTATATGCGTCTCCACAGCTTGAGGGGTTCTCGGCTGAATCGAGAAAGTTGCTCCTCATTGTTCAGGCACTTAGGGACAACTTGGAACCTGGGACCTTTGATCTTGGGGGGCTATATGAAGCAATCGAGGAGTGCCTGATTAATGATCCCTGGGTTTTGCTTAATGCATCTTGGTTCAACTCCTTCCTCACACATGCACTAAAATAG"
PA_H1_pro="MEDFVRQCFNPMIVELAEKAMKEYGEDPKIETNKFAAICTHLEVCFMYSDFHFIDERGESVIVESGDPNALLKHRFEIIEGRDRIMAWTVVNSICNTTGVEKPKFLPDLYDYKENRFIEIGVTRREVHIYYLEKANKIKSEKTHIHIFSFTGEEMATKADYTLDEESRARIKTRLFTIRQEMASRSLWDSFRQSERGEETIEEKFEITGTMRKLADQSLPPNFSSLENFRAYVDGFEPNGCIEGKLSQMSKEVNAKIEPFLRMTPRPLRLPDGPLCHQRSKFLLMDALKLSIEDPSHEGEGIPLYDAIKCMKTFFGWKEPNIVKSHERGINPNYLMAWKQVLAELQDIENEEKIPRTKNMKRTSQLKWALGENMAPEKVDFDDCKDVGDLKQYDSDEPEPRSLASWVQNEFNKACELTDSSWIELDEIGEDVAPIEHIASMRRNYFTAEVSHCRATEYIMKGVYINTALLNASCAAMDDFQLIPMISKCRTKEGRRKTNLYGFIIKGRSHLRNDTDVVNFVSMEFSLTDPRLEPHKWEKYCVLEIGDMLLRTAIGQVSRPMFLYVRTNGTSKIKMKWGMEMRRCLLQSLQQIESMIEAESSVKEKDMTKEFFENKSETWPIGESPRGVEEGSIGKVCRTLLAKSVFNSLYASPQLEGFSAESRKLLLIVQALRDNLEPGTFDLGGLYEAIEECLINDPWVLLNASWFNSFLTHALK*"
PA_H3_pro="MEDFVRQCFNPMIVELAEKAMKEYGEDSKIETNKFAAICTHLEVCFMYSDFHFIDEQGESIIVESGDPNALLKHRFEIIEGRDRTMAWTVVNSICNTTGVEKPKFLPDLYDYKENRFVEIGVTRREVHIYYLEKANKIKSEKTHIHIFSFTGEEMATKADYTLDEESRARIKTRLFTIRQEMASRGLWDSFRQSERGEETIEERFEISGTMRRLANQSLPPNFSSLENFRAYVDGFEPNGCIEGKLSQMSKEVNAQIEPFLKTTPRPLRLPDGPPCSQRSKFLLMDALKLSIEDPSHEGEGIPLYDAIKCMKTFFGWKEPNIIKPHEKGINPNYLLAWKQVLAELQDIENEEKIPKTKNMKRTSQLKWALGENMAPEKVDFDDCKDVGDLKQYDSDEPEPRSIASWVQNEFNKACELTDSSWMELDEIGEDVAPIEHIASMRRNYFTAEVSHCRATEYIMKGVYINTALLNASCAAMDDFQLIPMISKCRTKEGRRRTNLYGFIIKGRSHLRNDTDVVNFVSMEFSLTDPRLEPHKWEKYCVLEIGDMLLRTAIGQVSRPMFLYVRTNGTSKIKMKWGMEMRRCLLQSLQQIESMIEAESSVKEKDMTKEFFENKSETWPIGESPKGVEEGSIGKVCRALLAKSVFNSLYASPQLEGFSAESRKLLLIVQALRDNLEPGTFDLGGLYEAIEECLINDPWVLLNASWFNSFLTHALK*"
PA_X_H1_pro="MEDFVRQCFNPMIVELAEKAMKEYGEDPKIETNKFAAICTHLEVCFMYSDFHFIDERGESVIVESGDPNALLKHRFEIIEGRDRIMAWTVVNSICNTTGVEKPKFLPDLYDYKENRFIEIGVTRREVHIYYLEKANKIKSEKTHIHIFSFTGEEMATKADYTLDEESRARIKTRLFTIRQEMASRSLWDSFVSPKEAKRQLKKNLRLQELCASLQTKVSHRTSPALKTLEPM*"
PA_X_H3_pro="MEDFVRQCFNPMIVELAEKAMKEYGEDSKIETNKFAAICTHLEVCFMYSDFHFIDEQGESIIVESGDPNALLKHRFEIIEGRDRTMAWTVVNSICNTTGVEKPKFLPDLYDYKENRFVEIGVTRREVHIYYLEKANKIKSEKTHIHIFSFTGEEMATKADYTLDEESRARIKTRLFTIRQEMASRGLWDSFVSPREAKRQLKKDLKFQEPCAGLPTKVSHRTSPALKTLEPM*"
NP_H1_seq="ATGGCGTCTCAAGGCACCAAACGATCATATGAACAAATGGAGACTGGTGGGGAGCGCCAGGATGCCACAGAAATCAGAGCATCTGTCGGAAGAATGATTGCTGGAATCGGGAGATTTTACATCCAAATGTGCACTGAACTCAAACTCAGTGATTATGAGGGACGACTAATCCAGAACAGCATAACAATAGAGAGGATGGTGCTTTCTGCTTTTGATGAGAGAAGAAATAAATACCTAGAAGAGCATCCCAGTGCTGGGAAAGACCCCAAGAAAACAGGAGGACCCATATATAGAAGAATAGACGGAAAGTGGATGAGAGAACTCACCCTTTATGACAAAGAAGAAATAAGGAGAGTTTGGCGCCAAGCAAACAATGGCGAAGATGCAACAGCAGGTCTTACTCATATCATGATTTGGCATTCCAACCTGAATGATGCCACATACCAGAGAACAAGAGCTCTTGTTCGCACCGGAATGGATCCCAGAATGTGCTCTCTAATGCAAGGTTCAACACTTCCCAGAAGGTCTGGTGCCGCAGGTGCGGCGGTGAAAGGAGTTGGAACAATAGCAATGGAGTTAATCAGAATGATCAAACGTGGAATCAATGACCGAAATTTCTGGAGGGGTGAAAATGGACGAAGGACAAGGGTTGCTTATGAAAGAATGTGCAATATCCTCAAAGGAAAATTCCAAACAGCTGCACAGAGAGCAATGATGGATCAAGTAAGAGAAAGTCGAAACCCAGGAAACGCTGAGATTGAAGACCTCATTTTCCTGGCACGGTCAGCACTCATTCTGAGGGGATCAGTTGCACATAAATCCTGCCTGCCTGCTTGTGTGTATGGGCTTGCAGTAGCAAGTGGGCATGACTTTGAAAGGGAAGGGTACTCACTGGTCGGGATAGACCCATTCAAATTACTCCAAAACAGCCAAGTGGTCAGCCTGATGAGACCAAATGAAAACCCAGCTCACAAGAGTCAATTGGTGTGGATGGCATGCCACTCTGCTGCATTTGAAGATTTAAGAGTATCAAGTTTCATAAGAGGAAAGAAAGTGATTCCAAGAGGAAAGCTTTCCACAAGAGGGGTCCAGATTGCTTCAAATGAGAATGTGGAAACCATGGACTCCAATACCCTGGAACTAAGAAGCAGATACTGGGCCATAAGGACCAGGAGTGGAGGAAATACCAATCAACAAAGAGCATCCGCAGGCCAGATCAGTGTGCAGCCTACATTCTCAGTGCAGCGAAATCTCCCTTTTGAAAGAGCAACCGTTATGGCAGCATTCAGCGGGAACAATGAAGGACGGACATCCGACATGCGAACAGAAGTTATAAGAATGATGGAAAGTGCAAAGCCAGAAGATTTGTCCTTCCAGGGGCGGGGAGTCTTCGAGCTCTCAGACGAAAAGGCAACGAACCCGATCGTGCCTTCCTTTGACATGAGTAATGAAGGGTCTTATTTCTTCGGAGACAATGCAGAGGAGTATGACAGTTGA"
NP_H1_pro="MASQGTKRSYEQMETGGERQDATEIRASVGRMIAGIGRFYIQMCTELKLSDYEGRLIQNSITIERMVLSAFDERRNKYLEEHPSAGKDPKKTGGPIYRRIDGKWMRELTLYDKEEIRRVWRQANNGEDATAGLTHIMIWHSNLNDATYQRTRALVRTGMDPRMCSLMQGSTLPRRSGAAGAAVKGVGTIAMELIRMIKRGINDRNFWRGENGRRTRVAYERMCNILKGKFQTAAQRAMMDQVRESRNPGNAEIEDLIFLARSALILRGSVAHKSCLPACVYGLAVASGHDFEREGYSLVGIDPFKLLQNSQVVSLMRPNENPAHKSQLVWMACHSAAFEDLRVSSFIRGKKVIPRGKLSTRGVQIASNENVETMDSNTLELRSRYWAIRTRSGGNTNQQRASAGQISVQPTFSVQRNLPFERATVMAAFSGNNEGRTSDMRTEVIRMMESAKPEDLSFQGRGVFELSDEKATNPIVPSFDMSNEGSYFFGDNAEEYDS*"
NP_H3_seq="ATGGCGTCTCAAGGCACCAAACGATCATATGAACAGATGGAGACTGGTGGGGAGCGCCAGGATGCCACAGAAATCAGAGCATCTGTCGGAAGAATGGTTGGTGGAATCGGGAAATTCTACATCCAAATGTGCACTGAACTCAAACTCAGTGATTATGAGGGACGACTAATTCAAAATAGCATAACAATAGAGAGAATGGTGCTCTCTGCTTTCGATGAGAGAAGAAATAAGTACCTAGAAGATCATCCCAGTTCTGGGAAGGATCCTAAGAAAACTGGAGGACCAATATATAGAAGAGTAGACGGAAAGTGGATGAGAGAACTCATTCTTTATGACAAAGAAGAAATAAGGAGAGTTTGGCGCCAAGCAAACAATGGTGAAGATGCAACAGCTGGCCTTACTCATATCATGATTTGGCACTCCAATCTGAATGATGCCACGTACCAGAGAACAAGAGCGCTTGTTCGCACTGGAATGGATCCCAGAATGTGCTCACTAATGCAAGGTTCAACACTCCCCAGAAGGTCTGGGGCCGCAGGTGCTGCAGTAAAAGGAGTTGGAACAATAGCAATGGAACTAATCAGAATGATCAAACGTGGGATCAATGACCGAAACTTCTGGAGAGGTGAAAATGGACGAAGAACAAGGATTGCATATGAGAGAATGTGCAATATCCTTAAAGGAAAATTTCAGACAGCAGCCCAGAGGGCAATGATGGATCAAGTGAGAGAAAGTCGAAACCCAGGAAATGCTGAGATTGAAGATCTCATTTTCCTAGCACGGTCAGCACTTATTCTAAGGGGATCAGTTGCACATAAGTCTTGCCTGCCTGCTTGTGTGTATGGGCTTGCAGTGGCAAGTGGACATGACTTTGAAAGGGAAGGATACTCACTGGTCGGGATAGATCCATTTAAATTACTCCAAAACAGTCAAGTGTTCAGTCTGATAAGACCAAATGAAAACCCAGCTCACAAGAGTCAATTAGTGTGGATGGCATGCCACTCTGCTGCATTTGAGGATCTAAGGGTATCAAGTTTCATAAGAGGGAAGAAAGTGCTTCCAAGAGGAAAGCTTTCCACAAGAGGAGTCCAGATTGCTTCAAATGAGAATGTGGAAGCCATGGATTCCAATACCTTAGAGCTGAGAAGCAGATACTGGGCCATAAGGACCAGAAGTGGAGGAAATACCAATCAGCAGAAAGCATCCGCGGGCCAAATCAGTGTACAACCTACTTTCTCAGTGCAACGGAATCTCCCTTTTGAACGAGCAACTGTTTTGGCAGCTTTCAGCGGGAACAATGAAGGACGGACATCCGATATGCGAACAGAAGTTATAAGGATGATGGAGAGTGCAAAGCCAGAAGATTTGTCCTTCCAGGGGCGGGGAGTCTTCGAGCTCTCGGACGAAAAGGCAGCGAGCCCGATCGTGCCTTCCTTTGACATGAGTAACGAAGGATCTTATTTCTTCGGAGACAATGCAGAGGAGTATGACAGTTGA"
NP_H3_pro="MASQGTKRSYEQMETGGERQDATEIRASVGRMVGGIGKFYIQMCTELKLSDYEGRLIQNSITIERMVLSAFDERRNKYLEDHPSSGKDPKKTGGPIYRRVDGKWMRELILYDKEEIRRVWRQANNGEDATAGLTHIMIWHSNLNDATYQRTRALVRTGMDPRMCSLMQGSTLPRRSGAAGAAVKGVGTIAMELIRMIKRGINDRNFWRGENGRRTRIAYERMCNILKGKFQTAAQRAMMDQVRESRNPGNAEIEDLIFLARSALILRGSVAHKSCLPACVYGLAVASGHDFEREGYSLVGIDPFKLLQNSQVFSLIRPNENPAHKSQLVWMACHSAAFEDLRVSSFIRGKKVLPRGKLSTRGVQIASNENVEAMDSNTLELRSRYWAIRTRSGGNTNQQKASAGQISVQPTFSVQRNLPFERATVLAAFSGNNEGRTSDMRTEVIRMMESAKPEDLSFQGRGVFELSDEKAASPIVPSFDMSNEGSYFFGDNAEEYDS*"
M_H1_seq="ATGAGTCTTCTAACCGAGGTTGAAACGTACGTTCTTTCTATCATCCCGTCAGGCCCCCTCAAAGCCGAGATCGCGCAGAGACTGGAAAGTGTCTTTGCAGGAAAGAACACAGATCTTGAGGCTCTCATGGAATGGCTAAAGACAAGACCAATCTTGTCACCTCTGACTAAGGGAATTTTAGGATTTGTGTTCACGCTCACCGTGCCCAGTGAGCGAGGACTGCAGCGTAGACGCTTTGTCCAAAATGCCCTAAATGGGAATGGGGACCCGAACAACATGGATAGAGCAGTTAAACTATACAAGAAGCTCAAAAGAGAAATAACGTTCCATGGGGCCAAGGAGGTGTCACTAAGCTATTCAACTGGTGCACTTGCCAGTTGCATGGGCCTCATATACAACAGGATGGGAACAGTGACCACAGAAGCTGCTTTTGGTCTAGTGTGTGCCACTTGTGAACAGATTGCTGATTCACAGCATCGGTCTCACAGACAAATGGCTACTACCACCAATCCACTAATCAGGCATGAAAACAGAATGGTGCTGGCTAGCACTACGGCAAAGGCTATGGAACAGATGGCTGGATCGAGTGAACAGGCATCAGAGGCCATGGAGGTTGCTAATCAGACTAGGCAGATGGTACATGCAATGAGAACTATTGGGACTCATCCTAGCTCCAGTGCTGGTCTGAAAGATGACCTTCTTGAAAATTTGCAGGCCTACCAGAAGCGAATGGGAGTGCAGATGCAGCGATTCAAGTGATCCTCTCGCCATTGCAGCAAATATCATTGGGATCTTGCACCTGATATTGTGGATTACTGATCGTCTTTTTTTCAAATGTATTTATCGTCGCTTTAAATACGGTTTGAAAAGAGGGCCTTCTACAGAAGGAGTGCCTGAGTCCATGAGGGAAGAATATCAACAGGAACAGCAGAGTGCTGTGGATGTTGACGATGGTCATTTTGTCAACATAGAGCTAGAGTAA"
M1_H1_pro="MSLLTEVETYVLSIIPSGPLKAEIAQRLESVFAGKNTDLEALMEWLKTRPILSPLTKGILGFVFTLTVPSERGLQRRRFVQNALNGNGDPNNMDRAVKLYKKLKREITFHGAKEVSLSYSTGALASCMGLIYNRMGTVTTEAAFGLVCATCEQIADSQHRSHRQMATTTNPLIRHENRMVLASTTAKAMEQMAGSSEQASEAMEVANQTRQMVHAMRTIGTHPSSSAGLKDDLLENLQAYQKRMGVQMQRFK*"
M2_H1_pro="MSLLTEVETPTRSEWECRCSDSSDPLAIAANIIGILHLILWITDRLFFKCIYRRFKYGLKRGPSTEGVPESMREEYQQEQQSAVDVDDGHFVNIELE*"
M_H3_seq="ATGAGTCTTCTGACCGAGGTCGAAACGTACGTTCTTTCTATCATCCCGTCAGGCCCCCTCAAAGCCGAGATCGCACAGAGACTGGAAAGTGTCTTTGCAGGAAAGAACACAGATCTTGAGGCCCTCATGGAATGGCTAAAGACAAGACCAATCTTGTCACCTCTGACTAAGGGGATTTTAGGATTTGTGTTCACGCTCACCGTGCCCAGTGAGCGAGGACTGCAGCGTAGACGCTTTGTCCAAAATGCCCTAAATGGAAATGGGGACCCGAACAACATGGATAGAGCAGTTAAGCTATACAAGAAGCTCAAAAGAGAAATAACATTCCATGGGGCCAAGGAGGTGTCACTAAGCTATTCAACTGGTGCACTTGCCAGTTGCATGGGCCTCATATACAACAGGATGGGAACAGTAACCACAGAAGCTGCTTTTGGTCTAGTGTGTGCCACTTGTGAACAGATTGCTGATTCACAGCATCGGTCTCACAGACAAATGGCTACTACCACCAATCCACTGATCAGGCATGAAAACAGGATGGTGCTGGCTAGCACTACGGCAAAGGCTATGGAACAGATGGCTGGATCGAGTGAGCAGGCAGCAGAGGCCATGGAGGTTGCTAATAAGACTAGGCAGATGGTACATGCAATGAGAACTATTGGGACTCATCCTAGCTCCAGTGCTGGTCTGAAAGATGACCTTCTTGAAAATTTGCAGGCTTACCAGAAGCGAATGGGAGTGCAAATGCAGCGATTCAAATGATCCTCTCGTCATTGCAGCAAATATCATTGGGATCTTGCACCTGATATTGTGGATTTCTGATCGTCTTTTTTTCAAATGTGTTTATCGTCACTTTAAATACGGTTTGAAAAGAGGGCCTTCTACAGAAGGAGTGCCTGAGTCCATGAGGGAAGAATATCAACAGGAACAGCAGAGTGCTGTGGATGTTGACGATGGTCATTTTGTCAACATAGAGCTTGAGTAA"
M1_H3_pro="MSLLTEVETYVLSIIPSGPLKAEIAQRLESVFAGKNTDLEALMEWLKTRPILSPLTKGILGFVFTLTVPSERGLQRRRFVQNALNGNGDPNNMDRAVKLYKKLKREITFHGAKEVSLSYSTGALASCMGLIYNRMGTVTTEAAFGLVCATCEQIADSQHRSHRQMATTTNPLIRHENRMVLASTTAKAMEQMAGSSEQAAEAMEVANKTRQMVHAMRTIGTHPSSSAGLKDDLLENLQAYQKRMGVQMQRFK*"
M2_H3_pro="MSLLTEVETLTRSEWECKCSDSNDPLVIAANIIGILHLILWISDRLFFKCVYRHFKYGLKRGPSTEGVPESMREEYQQEQQSAVDVDDGHFVNIELE*"
NS_H1_seq="ATGGACTCCAATACTGTGTCAAGCTTTCAGGTAGACTGTTTCCTTTGGCACATCCGCAAACGGTTTGCAGACAATGGATTGGGTGATGCCCCATTCCTTGATCGGCTCCGCCGAGATCAAAGGTCCCTAAAAGGAAGAGGCAACACCCTTAGCCTCGACATCGAAACAGCCACTCTTGTTGGGAAACAGATTGTTGAATGGATTTTGAAAGAGGAATCCAGAGATACACTTAAGATGACCATTGCATCTGTACCTACTTCGCGCTACCTAGCTGACATGACCCTCGAGGAAATGTCACGAGACTGGTTCATGCTCATGCCTAGGCAAAAGATAATAGGCCCTCTTTGTGTGCGAATAGACCAGGCGATTCTGGAAAAGAACATCATACTGAAAGCGAACTTCAGTGTGATCTTTAATCGATTAGAGACTTTGATACTACTAAGGGCTTTCACTGAGGAGGGAGCAATCGTTGGAGAAATTTCACCATTACCTTCTCTTCCAGGACATACTAATGAGGATGTCAAAAATGCAGTTGGGGTCCTCATCGGAGGACTTGAATGGAATGGTAACACGGTTCGAGGCTCTGAAAATCTACAGAGATTCGCTTGGAGAAACCGTAATGAGGATGGGAGACCTTCACTACCTCCAGAACAGGAATGAAAAGTGGCGAGAGCAATTGGGACAGAAATTTGAGGAAATAAGGTGGTTAATTGAAGAAGTGCGGCACAGATTGAAAGCGACAGAGAATAGTTTCGAACAAATAACATTTATGCAAGCCTTACAACTACTGCTTGAAGTAGAACAAGAGATAAGAACTTTCTCGTTTCAGCTTATTTAA"
NS1_H1_pro="MDSNTVSSFQVDCFLWHIRKRFADNGLGDAPFLDRLRRDQRSLKGRGNTLSLDIETATLVGKQIVEWILKEESRDTLKMTIASVPTSRYLADMTLEEMSRDWFMLMPRQKIIGPLCVRIDQAILEKNIILKANFSVIFNRLETLILLRAFTEEGAIVGEISPLPSLPGHTNEDVKNAVGVLIGGLEWNGNTVRGSENLQRFAWRNRNEDGRPSLPPEQE*"
NEP_H1_pro="MDSNTVSSFQDILMRMSKMQLGSSSEDLNGMVTRFEALKIYRDSLGETVMRMGDLHYLQNRNEKWREQLGQKFEEIRWLIEEVRHRLKATENSFEQITFMQALQLLLEVEQEIRTFSFQLI*"
NS_H3_seq="ATGGACTCCAATACTGTGTCAAGCTTTCAGGTAGACTGTTTCCTTTGGCACATCCGCAAACGGTTTGCAGACAATGGATTGGGTGATGCCCCATTCCTTGATCGGCTCCGCCGGGATCAAAAGTCCCTGATAGGAAGAGGCAACACCCTTAACCTCGACATCGAAACAGCCACTCTTGTTGGGAAACAAATTGTTGAGTGGATTTTGAAAGAGGAATCCAGCGATACAATTAAGATGACCATTGCATCTGTACCCACCCCGCGCTACCTAGCTGACATGACCCTCGAGGAAATGTCACGAGACTGGTTCATGCTCATGCCTAGGCAAAAGATAATAGGCCCTCTTTGTGTGCGAATGGACCAGGCGATCCTGGAAAAGAACATCATACTGAAAGCGAACTTCAGTGTGATCTTTAACCGATTAGAGACTTTGATACTACTAAGGGCTTTCACTGAGGAGGGAGCAATCGTTGGAGAAATTTCACCATTACCTTCTCTTCCAGGACATACTAATGAGGATGTCAAAAATGCAATTGGGGTCCTCATCGGAGGACTTGAATGGAATGGTAACACGGTTCGAGGCTCTGAAAATCTACAGAGATTCGCTTGGAGAAACCGTAATGAGGATGGGAGACCTTCACTACCTCCAGAACAGAAATGAAAAGTGGCGAGAGCAATTGGGACAGAAATTTGAGGAAATAAGGTGGTTAATTGAAGAAGTACGGCACAGATTGAAAGCAACAGAGAATAGTTTCGAACAAATAACATTTATGCAAGCCTTACAACTACTGCTTGAAGTAGAACAAGAGATAAGAACTTTTTCGTTTCAGCTTATTTAA"
NS1_H3_pro="MDSNTVSSFQVDCFLWHIRKRFADNGLGDAPFLDRLRRDQKSLIGRGNTLNLDIETATLVGKQIVEWILKEESSDTIKMTIASVPTPRYLADMTLEEMSRDWFMLMPRQKIIGPLCVRMDQAILEKNIILKANFSVIFNRLETLILLRAFTEEGAIVGEISPLPSLPGHTNEDVKNAIGVLIGGLEWNGNTVRGSENLQRFAWRNRNEDGRPSLPPEQK*"
NEP_H3_pro="MDSNTVSSFQDILMRMSKMQLGSSSEDLNGMVTRFEALKIYRDSLGETVMRMGDLHYLQNRNEKWREQLGQKFEEIRWLIEEVRHRLKATENSFEQITFMQALQLLLEVEQEIRTFSFQLI*"
#Import the input file
inputfile= sys.argv[1]
SNP_file=open(inputfile,'r', encoding="ISO-8859-1")

Sample=[]
Position=[]
Ref=[]
Cons=[]
Reads1=[]
Reads2=[]
VarFreq=[]
Strands1=[]
Strands2=[]
Qual1=[]
Qual2=[]
Pvalue=[]
MapQual1=[]
MapQual2=[]
Reads1Plus=[]
Reads1Minus=[]
Reads2Plus=[]
Reads2Minus=[]
VarAllele=[]
Day=[]
Treatment=[]
Segment=[]
title=SNP_file.readline()
title=title.strip()
title_add=title + "," + "Annotate" + "," + "Annotate_S" + "," + "Mutation" + "," + "Mutation_S" + "\n"
#Name the output file
outfile= sys.argv[2]
out_file=open(outfile,'w')
out_file.write(title_add)

for line_2 in SNP_file:
    line_2=line_2.strip()
    split_file_2=line_2.split(sep=',')
    Sample.append(split_file_2[0])
    Position.append(split_file_2[1])
    Ref.append(split_file_2[2])
    Cons.append(split_file_2[3])
    Reads1.append(split_file_2[4])
    Reads2.append(split_file_2[5])
    VarFreq.append(split_file_2[6])
    Strands1.append(split_file_2[7])
    Strands2.append(split_file_2[8])
    Qual1.append(split_file_2[9])
    Qual2.append(split_file_2[10])
    Pvalue.append(split_file_2[11])
    MapQual1.append(split_file_2[12])
    MapQual2.append(split_file_2[13])
    Reads1Plus.append(split_file_2[14])
    Reads1Minus.append(split_file_2[15])
    Reads2Plus.append(split_file_2[16])
    Reads2Minus.append(split_file_2[17])
    VarAllele.append(split_file_2[18])
    Day.append(split_file_2[19])
    Treatment.append(split_file_2[20])
    Segment.append(split_file_2[21])
SNP_file.close()
name=str(Segment[0])

if "HA_H1" in name:
   Annotate=[]
   Annotate_S=[]
   Mutation=[]
   Mutation_S=[]
   for order in range(0,len(Position),1):
       Annotate_S.append("NA")
       Mutation_S.append("NA")
       if int(Position[order])%3==0:
          tri_nucleotide_1=str(HA_H1_seq[int(Position[order])-3]+HA_H1_seq[int(Position[order])-2]+VarAllele[order])
          ref_AA_1=HA_H1_pro[int(int(Position[order])/3)-1]
          variant_AA_1= str(amino_acid_dict[tri_nucleotide_1])
          amino_mutate_1=str(str(ref_AA_1)+str(int(int(Position[order])/3))+str(variant_AA_1))
          if ref_AA_1 == variant_AA_1:
             Annotate.append("Synonymous")
             Mutation.append(amino_mutate_1)
          elif ref_AA_1 != variant_AA_1 and variant_AA_1 == "*":
             Annotate.append("stop_gained")
             Mutation.append(amino_mutate_1)
          else:
             Annotate.append("Non_Synonymous")
             Mutation.append(amino_mutate_1)
       if int(Position[order])%3==1:
          tri_nucleotide_2=str(VarAllele[order]+HA_H1_seq[int(Position[order])]+HA_H1_seq[int(Position[order])+1])
          ref_AA_2=HA_H1_pro[int(int(int(Position[order])-1)/3)]
          variant_AA_2= str(amino_acid_dict[tri_nucleotide_2])
          amino_mutate_2=str(str(ref_AA_2)+str(int(int(int(Position[order])+2)/3))+str(variant_AA_2))
          if ref_AA_2 == variant_AA_2:
             Annotate.append("Synonymous")
             Mutation.append(amino_mutate_2)
          elif ref_AA_2 != variant_AA_2 and variant_AA_2 == "*":
             Annotate.append("stop_gained")
             Mutation.append(amino_mutate_2)
          else:
             Annotate.append("Non_Synonymous")
             Mutation.append(amino_mutate_2)
       if int(Position[order])%3==2:
          tri_nucleotide_3=str(HA_H1_seq[int(Position[order])-2]+VarAllele[order]+HA_H1_seq[int(Position[order])])
          ref_AA_3=HA_H1_pro[int(int(int(Position[order])-2)/3)]
          variant_AA_3= str(amino_acid_dict[tri_nucleotide_3])
          amino_mutate_3=str(str(ref_AA_3)+str(int(int(int(Position[order])+1)/3))+str(variant_AA_3))
          if ref_AA_3 == variant_AA_3:
             Annotate.append("Synonymous")
             Mutation.append(amino_mutate_3)
          elif ref_AA_3 != variant_AA_3 and variant_AA_3 == "*":
             Annotate.append("stop_gained")
             Mutation.append(amino_mutate_3)
          else:
             Annotate.append("Non_Synonymous")
             Mutation.append(amino_mutate_3)



if "HA_H3" in name:
   Annotate=[]
   Annotate_S=[]
   Mutation=[]
   Mutation_S=[]
   for order in range(0,len(Position),1):
       Annotate_S.append("NA")
       Mutation_S.append("NA")
       if int(Position[order])%3==0:
          tri_nucleotide_1=str(HA_H3_seq[int(Position[order])-3]+HA_H3_seq[int(Position[order])-2]+VarAllele[order])
          ref_AA_1=HA_H3_pro[int(int(Position[order])/3)-1]
          variant_AA_1= str(amino_acid_dict[tri_nucleotide_1])
          amino_mutate_1=str(str(ref_AA_1)+str(int(int(Position[order])/3))+str(variant_AA_1))
          if ref_AA_1 == variant_AA_1:
             Annotate.append("Synonymous")
             Mutation.append(amino_mutate_1)
          elif ref_AA_1 != variant_AA_1 and variant_AA_1 == "*":
             Annotate.append("stop_gained")
             Mutation.append(amino_mutate_1)
          else:
             Annotate.append("Non_Synonymous")
             Mutation.append(amino_mutate_1)
       if int(Position[order])%3==1:
          tri_nucleotide_2=str(VarAllele[order]+HA_H3_seq[int(Position[order])]+HA_H3_seq[int(Position[order])+1])
          ref_AA_2=HA_H3_pro[int(int(int(Position[order])-1)/3)]
          variant_AA_2= str(amino_acid_dict[tri_nucleotide_2])
          amino_mutate_2=str(str(ref_AA_2)+str(int(int(int(Position[order])+2)/3))+str(variant_AA_2))
          if ref_AA_2 == variant_AA_2:
             Annotate.append("Synonymous")
             Mutation.append(amino_mutate_2)
          elif ref_AA_2 != variant_AA_2 and variant_AA_2 == "*":
             Annotate.append("stop_gained")
             Mutation.append(amino_mutate_2)
          else:
             Annotate.append("Non_Synonymous")
             Mutation.append(amino_mutate_2)
       if int(Position[order])%3==2:
          tri_nucleotide_3=str(HA_H3_seq[int(Position[order])-2]+VarAllele[order]+HA_H3_seq[int(Position[order])])
          ref_AA_3=HA_H3_pro[int(int(int(Position[order])-2)/3)]
          variant_AA_3= str(amino_acid_dict[tri_nucleotide_3])
          amino_mutate_3=str(str(ref_AA_3)+str(int(int(int(Position[order])+1)/3))+str(variant_AA_3))
          if ref_AA_3 == variant_AA_3:
             Annotate.append("Synonymous")
             Mutation.append(amino_mutate_3)
          elif ref_AA_3 != variant_AA_3 and variant_AA_3 == "*":
             Annotate.append("stop_gained")
             Mutation.append(amino_mutate_3)
          else:
             Annotate.append("Non_Synonymous")
             Mutation.append(amino_mutate_3)

if "NA_H1" in name:
   Annotate=[]
   Annotate_S=[]
   Mutation=[]
   Mutation_S=[]
   for order in range(0,len(Position),1):
       Annotate_S.append("NA")
       Mutation_S.append("NA")
       if int(Position[order])%3==0:
          tri_nucleotide_1=str(NA_H1_seq[int(Position[order])-3]+NA_H1_seq[int(Position[order])-2]+VarAllele[order])
          ref_AA_1=NA_H1_pro[int(int(Position[order])/3)-1]
          variant_AA_1= str(amino_acid_dict[tri_nucleotide_1])
          amino_mutate_1=str(str(ref_AA_1)+str(int(int(Position[order])/3))+str(variant_AA_1))
          if ref_AA_1 == variant_AA_1:
             Annotate.append("Synonymous")
             Mutation.append(amino_mutate_1)
          elif ref_AA_1 != variant_AA_1 and variant_AA_1 == "*":
             Annotate.append("stop_gained")
             Mutation.append(amino_mutate_1)
          else:
             Annotate.append("Non_Synonymous")
             Mutation.append(amino_mutate_1)
       if int(Position[order])%3==1:
          tri_nucleotide_2=str(VarAllele[order]+NA_H1_seq[int(Position[order])]+NA_H1_seq[int(Position[order])+1])
          ref_AA_2=NA_H1_pro[int(int(int(Position[order])-1)/3)]
          variant_AA_2= str(amino_acid_dict[tri_nucleotide_2])
          amino_mutate_2=str(str(ref_AA_2)+str(int(int(int(Position[order])+2)/3))+str(variant_AA_2))
          if ref_AA_2 == variant_AA_2:
             Annotate.append("Synonymous")
             Mutation.append(amino_mutate_2)
          elif ref_AA_2 != variant_AA_2 and variant_AA_2 == "*":
             Annotate.append("stop_gained")
             Mutation.append(amino_mutate_2)
          else:
             Annotate.append("Non_Synonymous")
             Mutation.append(amino_mutate_2)
       if int(Position[order])%3==2:
          tri_nucleotide_3=str(NA_H1_seq[int(Position[order])-2]+VarAllele[order]+NA_H1_seq[int(Position[order])])
          ref_AA_3=NA_H1_pro[int(int(int(Position[order])-2)/3)]
          variant_AA_3= str(amino_acid_dict[tri_nucleotide_3])
          amino_mutate_3=str(str(ref_AA_3)+str(int(int(int(Position[order])+1)/3))+str(variant_AA_3))
          if ref_AA_3 == variant_AA_3:
             Annotate.append("Synonymous")
             Mutation.append(amino_mutate_3)
          elif ref_AA_3 != variant_AA_3 and variant_AA_3 == "*":
             Annotate.append("stop_gained")
             Mutation.append(amino_mutate_3)
          else:
             Annotate.append("Non_Synonymous")
             Mutation.append(amino_mutate_3)

if "NA_H3" in name:
   Annotate=[]
   Annotate_S=[]
   Mutation=[]
   Mutation_S=[]
   for order in range(0,len(Position),1):
       Annotate_S.append("NA")
       Mutation_S.append("NA")
       if int(Position[order])%3==0:
          tri_nucleotide_1=str(NA_H3_seq[int(Position[order])-3]+NA_H3_seq[int(Position[order])-2]+VarAllele[order])
          ref_AA_1=NA_H3_pro[int(int(Position[order])/3)-1]
          variant_AA_1= str(amino_acid_dict[tri_nucleotide_1])
          amino_mutate_1=str(str(ref_AA_1)+str(int(int(Position[order])/3))+str(variant_AA_1))
          if ref_AA_1 == variant_AA_1:
             Annotate.append("Synonymous")
             Mutation.append(amino_mutate_1)
          elif ref_AA_1 != variant_AA_1 and variant_AA_1 == "*":
             Annotate.append("stop_gained")
             Mutation.append(amino_mutate_1)
          else:
             Annotate.append("Non_Synonymous")
             Mutation.append(amino_mutate_1)
       if int(Position[order])%3==1:
          tri_nucleotide_2=str(VarAllele[order]+NA_H3_seq[int(Position[order])]+NA_H3_seq[int(Position[order])+1])
          ref_AA_2=NA_H3_pro[int(int(int(Position[order])-1)/3)]
          variant_AA_2= str(amino_acid_dict[tri_nucleotide_2])
          amino_mutate_2=str(str(ref_AA_2)+str(int(int(int(Position[order])+2)/3))+str(variant_AA_2))
          if ref_AA_2 == variant_AA_2:
             Annotate.append("Synonymous")
             Mutation.append(amino_mutate_2)
          elif ref_AA_2 != variant_AA_2 and variant_AA_2 == "*":
             Annotate.append("stop_gained")
             Mutation.append(amino_mutate_2)
          else:
             Annotate.append("Non_Synonymous")
             Mutation.append(amino_mutate_2)
       if int(Position[order])%3==2:
          tri_nucleotide_3=str(NA_H3_seq[int(Position[order])-2]+VarAllele[order]+NA_H3_seq[int(Position[order])])
          ref_AA_3=NA_H3_pro[int(int(int(Position[order])-2)/3)]
          variant_AA_3= str(amino_acid_dict[tri_nucleotide_3])
          amino_mutate_3=str(str(ref_AA_3)+str(int(int(int(Position[order])+1)/3))+str(variant_AA_3))
          if ref_AA_3 == variant_AA_3:
             Annotate.append("Synonymous")
             Mutation.append(amino_mutate_3)
          elif ref_AA_3 != variant_AA_3 and variant_AA_3 == "*":
             Annotate.append("stop_gained")
             Mutation.append(amino_mutate_3)
          else:
             Annotate.append("Non_Synonymous")
             Mutation.append(amino_mutate_3)

if "PB2_H1" in name:
   Annotate=[]
   Annotate_S=[]
   Mutation=[]
   Mutation_S=[]
   for order in range(0,len(Position),1):
       Annotate_S.append("NA")
       Mutation_S.append("NA")
       if int(Position[order])%3==0:
          tri_nucleotide_1=str(PB2_H1_seq[int(Position[order])-3]+PB2_H1_seq[int(Position[order])-2]+VarAllele[order])
          ref_AA_1=PB2_H1_pro[int(int(Position[order])/3)-1]
          variant_AA_1= str(amino_acid_dict[tri_nucleotide_1])
          amino_mutate_1=str(str(ref_AA_1)+str(int(Position[order])/3)+str(variant_AA_1))
          if ref_AA_1 == variant_AA_1:
             Annotate.append("Synonymous")
             Mutation.append(amino_mutate_1)
          elif ref_AA_1 != variant_AA_1 and variant_AA_1 == "*":
             Annotate.append("stop_gained")
             Mutation.append(amino_mutate_1)
          else:
             Annotate.append("Non_Synonymous")
             Mutation.append(amino_mutate_1)
       if int(Position[order])%3==1:
          tri_nucleotide_2=str(VarAllele[order]+PB2_H1_seq[int(Position[order])]+PB2_H1_seq[int(Position[order])+1])
          ref_AA_2=PB2_H1_pro[int(int(int(Position[order])-1)/3)]
          variant_AA_2= str(amino_acid_dict[tri_nucleotide_2])
          amino_mutate_2=str(str(ref_AA_2)+str(int(int(int(Position[order])+2)/3))+str(variant_AA_2))
          if ref_AA_2 == variant_AA_2:
             Annotate.append("Synonymous")
             Mutation.append(amino_mutate_2)
          elif ref_AA_2 != variant_AA_2 and variant_AA_2 == "*":
             Annotate.append("stop_gained")
             Mutation.append(amino_mutate_2)
          else:
             Annotate.append("Non_Synonymous")
             Mutation.append(amino_mutate_2)
       if int(Position[order])%3==2:
          tri_nucleotide_3=str(PB2_H1_seq[int(Position[order])-2]+VarAllele[order]+PB2_H1_seq[int(Position[order])])
          ref_AA_3=PB2_H1_pro[int(int(int(Position[order])-2)/3)]
          variant_AA_3= str(amino_acid_dict[tri_nucleotide_3])
          amino_mutate_3=str(str(ref_AA_3)+str(int(int(int(Position[order])+1)/3))+str(variant_AA_3))
          if ref_AA_3 == variant_AA_3:
             Annotate.append("Synonymous")
             Mutation.append(amino_mutate_3)
          elif ref_AA_3 != variant_AA_3 and variant_AA_3 == "*":
             Annotate.append("stop_gained")
             Mutation.append(amino_mutate_3)
          else:
             Annotate.append("Non_Synonymous")
             Mutation.append(amino_mutate_3)

if "PB2_H3" in name:
   Annotate=[]
   Annotate_S=[]
   Mutation=[]
   Mutation_S=[]
   for order in range(0,len(Position),1):
       Annotate_S.append("NA")
       Mutation_S.append("NA")
       if int(Position[order])%3==0:
          tri_nucleotide_1=str(PB2_H3_seq[int(Position[order])-3]+PB2_H3_seq[int(Position[order])-2]+VarAllele[order])
          ref_AA_1=PB2_H3_pro[int(int(Position[order])/3)-1]
          variant_AA_1= str(amino_acid_dict[tri_nucleotide_1])
          amino_mutate_1=str(str(ref_AA_1)+str(int(Position[order])/3)+str(variant_AA_1))
          if ref_AA_1 == variant_AA_1:
             Annotate.append("Synonymous")
             Mutation.append(amino_mutate_1)
          elif ref_AA_1 != variant_AA_1 and variant_AA_1 == "*":
             Annotate.append("stop_gained")
             Mutation.append(amino_mutate_1)
          else:
             Annotate.append("Non_Synonymous")
             Mutation.append(amino_mutate_1)
       if int(Position[order])%3==1:
          tri_nucleotide_2=str(VarAllele[order]+PB2_H3_seq[int(Position[order])]+PB2_H3_seq[int(Position[order])+1])
          ref_AA_2=PB2_H3_pro[int(int(int(Position[order])-1)/3)]
          variant_AA_2= str(amino_acid_dict[tri_nucleotide_2])
          amino_mutate_2=str(str(ref_AA_2)+str(int(int(int(Position[order])+2)/3))+str(variant_AA_2))
          if ref_AA_2 == variant_AA_2:
             Annotate.append("Synonymous")
             Mutation.append(amino_mutate_2)
          elif ref_AA_2 != variant_AA_2 and variant_AA_2 == "*":
             Annotate.append("stop_gained")
             Mutation.append(amino_mutate_2)
          else:
             Annotate.append("Non_Synonymous")
             Mutation.append(amino_mutate_2)
       if int(Position[order])%3==2:
          tri_nucleotide_3=str(PB2_H3_seq[int(Position[order])-2]+VarAllele[order]+PB2_H3_seq[int(Position[order])])
          ref_AA_3=PB2_H3_pro[int(int(int(Position[order])-2)/3)]
          variant_AA_3= str(amino_acid_dict[tri_nucleotide_3])
          amino_mutate_3=str(str(ref_AA_3)+str(int(int(int(Position[order])+1)/3))+str(variant_AA_3))
          if ref_AA_3 == variant_AA_3:
             Annotate.append("Synonymous")
             Mutation.append(amino_mutate_3)
          elif ref_AA_3 != variant_AA_3 and variant_AA_3 == "*":
             Annotate.append("stop_gained")
             Mutation.append(amino_mutate_3)
          else:
             Annotate.append("Non_Synonymous")
             Mutation.append(amino_mutate_3)

if "PB1_H1" in name:
   Annotate=[]
   Annotate_S=[]
   Mutation=[]
   Mutation_S=[]
   for order in range(0,len(Position),1):
       if int(Position[order])%3==0:
          tri_nucleotide_1=str(PB1_H1_seq[int(Position[order])-3]+PB1_H1_seq[int(Position[order])-2]+VarAllele[order])
          ref_AA_1=PB1_H1_pro[int(int(Position[order])/3)-1]
          variant_AA_1= str(amino_acid_dict[tri_nucleotide_1])
          amino_mutate_1=str(str(ref_AA_1)+str(int(Position[order])/3)+str(variant_AA_1))
          if ref_AA_1 == variant_AA_1:
             Annotate.append("Synonymous")
             Mutation.append(amino_mutate_1)
          elif ref_AA_1 != variant_AA_1 and variant_AA_1 == "*":
             Annotate.append("stop_gained")
             Mutation.append(amino_mutate_1)
          else:
             Annotate.append("Non_Synonymous")
             Mutation.append(amino_mutate_1)
       if int(Position[order])%3==1:
          tri_nucleotide_2=str(VarAllele[order]+PB1_H1_seq[int(Position[order])]+PB1_H1_seq[int(Position[order])+1])
          ref_AA_2=PB1_H1_pro[int(int(int(Position[order])-1)/3)]
          variant_AA_2= str(amino_acid_dict[tri_nucleotide_2])
          amino_mutate_2=str(str(ref_AA_2)+str(int(int(int(Position[order])+2)/3))+str(variant_AA_2))
          if ref_AA_2 == variant_AA_2:
             Annotate.append("Synonymous")
             Mutation.append(amino_mutate_2)
          elif ref_AA_2 != variant_AA_2 and variant_AA_2 == "*":
             Annotate.append("stop_gained")
             Mutation.append(amino_mutate_2)
          else:
             Annotate.append("Non_Synonymous")
             Mutation.append(amino_mutate_2)
       if int(Position[order])%3==2:
          tri_nucleotide_3=str(PB1_H1_seq[int(Position[order])-2]+VarAllele[order]+PB1_H1_seq[int(Position[order])])
          ref_AA_3=PB1_H1_pro[int(int(int(Position[order])-2)/3)]
          variant_AA_3= str(amino_acid_dict[tri_nucleotide_3])
          amino_mutate_3=str(str(ref_AA_3)+str(int(int(int(Position[order])+1)/3))+str(variant_AA_3))
          if ref_AA_3 == variant_AA_3:
             Annotate.append("Synonymous")
             Mutation.append(amino_mutate_3)
          elif ref_AA_3 != variant_AA_3 and variant_AA_3 == "*":
             Annotate.append("stop_gained")
             Mutation.append(amino_mutate_3)
          else:
             Annotate.append("Non_Synonymous")
             Mutation.append(amino_mutate_3)
#Annotated for PB1-F2 protein
       if int(Position[order])>94 and int(Position[order])<335:
          if int(int(Position[order])-94)%3==1:
             tri_nucleotide_4=str(VarAllele[order]+PB1_H1_seq[int(Position[order])]+PB1_H1_seq[int(Position[order])+1])
             ref_AA_4=PB1_F2_H1_pro[int(int(int(Position[order])-95)/3)]
             variant_AA_4= str(amino_acid_dict[tri_nucleotide_4])
             amino_mutate_4=str(str(ref_AA_4)+str(int(int(int(Position[order])+2-94)/3))+str(variant_AA_4))
             if ref_AA_4 == variant_AA_4:
                Annotate_S.append("Synonymous")
                Mutation_S.append(amino_mutate_4)
             elif ref_AA_4 != variant_AA_4 and variant_AA_4 == "*":
                Annotate_S.append("stop_gained")
                Mutation_S.append(amino_mutate_4)
             else:
                Annotate_S.append("Non_Synonymous")
                Mutation_S.append(amino_mutate_4)
          if int(int(Position[order])-94)%3==2:
             tri_nucleotide_5=str(PB1_H1_seq[int(Position[order])-2]+VarAllele[order]+PB1_H1_seq[int(Position[order])])
             ref_AA_5=PB1_F2_H1_pro[int(int(int(Position[order])-96)/3)]
             variant_AA_5= str(amino_acid_dict[tri_nucleotide_5])
             amino_mutate_5=str(str(ref_AA_5)+str(int(int(int(Position[order])+1-94)/3))+str(variant_AA_5))
             if ref_AA_5 == variant_AA_5:
                Annotate_S.append("Synonymous")
                Mutation_S.append(amino_mutate_5)
             elif ref_AA_5 != variant_AA_5 and variant_AA_5 == "*":
                Annotate_S.append("stop_gained")
                Mutation_S.append(amino_mutate_5)
             else:
                Annotate_S.append("Non_Synonymous")
                Mutation_S.append(amino_mutate_5)
          if int(int(Position[order])-94)%3==0:
             tri_nucleotide_6=str(PB1_H1_seq[int(Position[order])-3]+PB1_H1_seq[int(Position[order])-2]+VarAllele[order])
             ref_AA_6=PB1_F2_H1_pro[int(int(int(Position[order])-97)/3)]
             variant_AA_6= str(amino_acid_dict[tri_nucleotide_6])
             amino_mutate_6=str(str(ref_AA_6)+str(int(int(Position[order])-94)/3)+str(variant_AA_6))
             if ref_AA_6 == variant_AA_6:
                Annotate_S.append("Synonymous")
                Mutation_S.append(amino_mutate_6)
             elif ref_AA_6 != variant_AA_6 and variant_AA_6 == "*":
                Annotate_S.append("stop_gained")
                Mutation_S.append(amino_mutate_6)
             else:
                Annotate_S.append("Non_Synonymous")
                Mutation_S.append(amino_mutate_6)
       if int(Position[order])<95 or int(Position[order])>334:
          Annotate_S.append("NA")
          Mutation_S.append("NA")


if "PB1_H3" in name:
   Annotate=[]
   Annotate_S=[]
   Mutation=[]
   Mutation_S=[]
   for order in range(0,len(Position),1):
       if int(Position[order])%3==0:
          tri_nucleotide_1=str(PB1_H3_seq[int(Position[order])-3]+PB1_H3_seq[int(Position[order])-2]+VarAllele[order])
          ref_AA_1=PB1_H3_pro[int(int(Position[order])/3)-1]
          variant_AA_1= str(amino_acid_dict[tri_nucleotide_1])
          amino_mutate_1=str(str(ref_AA_1)+str(int(Position[order])/3)+str(variant_AA_1))
          if ref_AA_1 == variant_AA_1:
             Annotate.append("Synonymous")
             Mutation.append(amino_mutate_1)
          elif ref_AA_1 != variant_AA_1 and variant_AA_1 == "*":
             Annotate.append("stop_gained")
             Mutation.append(amino_mutate_1)
          else:
             Annotate.append("Non_Synonymous")
             Mutation.append(amino_mutate_1)
       if int(Position[order])%3==1:
          tri_nucleotide_2=str(VarAllele[order]+PB1_H3_seq[int(Position[order])]+PB1_H3_seq[int(Position[order])+1])
          ref_AA_2=PB1_H3_pro[int(int(int(Position[order])-1)/3)]
          variant_AA_2= str(amino_acid_dict[tri_nucleotide_2])
          amino_mutate_2=str(str(ref_AA_2)+str(int(int(int(Position[order])+2)/3))+str(variant_AA_2))
          if ref_AA_2 == variant_AA_2:
             Annotate.append("Synonymous")
             Mutation.append(amino_mutate_2)
          elif ref_AA_2 != variant_AA_2 and variant_AA_2 == "*":
             Annotate.append("stop_gained")
             Mutation.append(amino_mutate_2)
          else:
             Annotate.append("Non_Synonymous")
             Mutation.append(amino_mutate_2)
       if int(Position[order])%3==2:
          tri_nucleotide_3=str(PB1_H3_seq[int(Position[order])-2]+VarAllele[order]+PB1_H3_seq[int(Position[order])])
          ref_AA_3=PB1_H3_pro[int(int(int(Position[order])-2)/3)]
          variant_AA_3= str(amino_acid_dict[tri_nucleotide_3])
          amino_mutate_3=str(str(ref_AA_3)+str(int(int(int(Position[order])+1)/3))+str(variant_AA_3))
          if ref_AA_3 == variant_AA_3:
             Annotate.append("Synonymous")
             Mutation.append(amino_mutate_3)
          elif ref_AA_3 != variant_AA_3 and variant_AA_3 == "*":
             Annotate.append("stop_gained")
             Mutation.append(amino_mutate_3)
          else:
             Annotate.append("Non_Synonymous")
             Mutation.append(amino_mutate_3)

       if int(Position[order])>94 and int(Position[order])<335:
          if int(int(Position[order])-94)%3==1:
             tri_nucleotide_4=str(VarAllele[order]+PB1_H3_seq[int(Position[order])]+PB1_H3_seq[int(Position[order])+1])
             ref_AA_4=PB1_F2_H3_pro[int(int(int(Position[order])-95)/3)]
             variant_AA_4= str(amino_acid_dict[tri_nucleotide_4])
             amino_mutate_4=str(str(ref_AA_4)+str(int(int(int(Position[order])+2-94)/3))+str(variant_AA_4))
             if ref_AA_4 == variant_AA_4:
                Annotate_S.append("Synonymous")
                Mutation_S.append(amino_mutate_4)
             elif ref_AA_4 != variant_AA_4 and variant_AA_4 == "*":
                Annotate_S.append("stop_gained")
                Mutation_S.append(amino_mutate_4)
             else:
                Annotate_S.append("Non_Synonymous")
                Mutation_S.append(amino_mutate_4)
          if int(int(Position[order])-94)%3==2:
             tri_nucleotide_5=str(PB1_H3_seq[int(Position[order])-2]+VarAllele[order]+PB1_H3_seq[int(Position[order])])
             ref_AA_5=PB1_F2_H3_pro[int(int(int(Position[order])-96)/3)]
             variant_AA_5= str(amino_acid_dict[tri_nucleotide_5])
             amino_mutate_5=str(str(ref_AA_5)+str(int(int(int(Position[order])+1-94)/3))+str(variant_AA_5))
             if ref_AA_5 == variant_AA_5:
                Annotate_S.append("Synonymous")
                Mutation_S.append(amino_mutate_5)
             elif ref_AA_5 != variant_AA_5 and variant_AA_5 == "*":
                Annotate_S.append("stop_gained")
                Mutation_S.append(amino_mutate_5)
             else:
                Annotate_S.append("Non_Synonymous")
                Mutation_S.append(amino_mutate_5)
          if int(int(Position[order])-94)%3==0:
             tri_nucleotide_6=str(PB1_H3_seq[int(Position[order])-3]+PB1_H3_seq[int(Position[order])-2]+VarAllele[order])
             ref_AA_6=PB1_F2_H3_pro[int(int(int(Position[order])-97)/3)]
             variant_AA_6= str(amino_acid_dict[tri_nucleotide_6])
             amino_mutate_6=str(str(ref_AA_6)+str(int(int(Position[order])-94)/3)+str(variant_AA_6))
             if ref_AA_6 == variant_AA_6:
                Annotate_S.append("Synonymous")
                Mutation_S.append(amino_mutate_6)
             elif ref_AA_6 != variant_AA_6 and variant_AA_6 == "*":
                Annotate_S.append("stop_gained")
                Mutation_S.append(amino_mutate_6)
             else:
                Annotate_S.append("Non_Synonymous")
                Mutation_S.append(amino_mutate_6)
       if int(Position[order])<95 or int(Position[order])>334:
          Annotate_S.append("NA")
          Mutation_S.append("NA")

if "PA_H1" in name:
   Annotate=[]
   Annotate_S=[]
   Mutation=[]
   Mutation_S=[]
   for order in range(0,len(Position),1):
       if int(Position[order])%3==0:
          tri_nucleotide_1=str(PA_H1_seq[int(Position[order])-3]+PA_H1_seq[int(Position[order])-2]+VarAllele[order])
          ref_AA_1=PA_H1_pro[int(int(Position[order])/3)-1]
          variant_AA_1= str(amino_acid_dict[tri_nucleotide_1])
          amino_mutate_1=str(str(ref_AA_1)+str(int(Position[order])/3)+str(variant_AA_1))
          if ref_AA_1 == variant_AA_1:
             Annotate.append("Synonymous")
             Mutation.append(amino_mutate_1)
          elif ref_AA_1 != variant_AA_1 and variant_AA_1 == "*":
             Annotate.append("stop_gained")
             Mutation.append(amino_mutate_1)
          else:
             Annotate.append("Non_Synonymous")
             Mutation.append(amino_mutate_1)
       if int(Position[order])%3==1:
          tri_nucleotide_2=str(VarAllele[order]+PA_H1_seq[int(Position[order])]+PA_H1_seq[int(Position[order])+1])
          ref_AA_2=PA_H1_pro[int(int(int(Position[order])-1)/3)]
          variant_AA_2= str(amino_acid_dict[tri_nucleotide_2])
          amino_mutate_2=str(str(ref_AA_2)+str(int(int(int(Position[order])+2)/3))+str(variant_AA_2))
          if ref_AA_2 == variant_AA_2:
             Annotate.append("Synonymous")
             Mutation.append(amino_mutate_2)
          elif ref_AA_2 != variant_AA_2 and variant_AA_2 == "*":
             Annotate.append("stop_gained")
             Mutation.append(amino_mutate_2)
          else:
             Annotate.append("Non_Synonymous")
             Mutation.append(amino_mutate_2)
       if int(Position[order])%3==2:
          tri_nucleotide_3=str(PA_H1_seq[int(Position[order])-2]+VarAllele[order]+PA_H1_seq[int(Position[order])])
          ref_AA_3=PA_H1_pro[int(int(int(Position[order])-2)/3)]
          variant_AA_3= str(amino_acid_dict[tri_nucleotide_3])
          amino_mutate_3=str(str(ref_AA_3)+str(int(int(int(Position[order])+1)/3))+str(variant_AA_3))
          if ref_AA_3 == variant_AA_3:
             Annotate.append("Synonymous")
             Mutation.append(amino_mutate_3)
          elif ref_AA_3 != variant_AA_3 and variant_AA_3 == "*":
             Annotate.append("stop_gained")
             Mutation.append(amino_mutate_3)
          else:
             Annotate.append("Non_Synonymous")
             Mutation.append(amino_mutate_3)
       if int(Position[order])>0 and int(Position[order])<571:
          if int(Position[order])%3==0:
              tri_nucleotide_4=str(PA_H1_seq[int(Position[order])-3]+PA_H1_seq[int(Position[order])-2]+VarAllele[order])
              ref_AA_4=PA_X_H1_pro[int(int(Position[order])/3)-1]
              variant_AA_4= str(amino_acid_dict[tri_nucleotide_4])
              amino_mutate_4=str(str(ref_AA_4)+str(int(Position[order])/3)+str(variant_AA_4))
              if ref_AA_4 == variant_AA_4:
                 Annotate_S.append("Synonymous")
                 Mutation_S.append(amino_mutate_4)
              elif ref_AA_4 != variant_AA_4 and variant_AA_4 == "*":
                 Annotate_S.append("stop_gained")
                 Mutation_S.append(amino_mutate_4)
              else:
                 Annotate_S.append("Non_Synonymous")
                 Mutation_S.append(amino_mutate_4)
          if int(Position[order])%3==1:
              tri_nucleotide_5=str(VarAllele[order]+PA_H1_seq[int(Position[order])]+PA_H1_seq[int(Position[order])+1])
              ref_AA_5=PA_X_H1_pro[int(int(int(Position[order])-1)/3)]
              variant_AA_5= str(amino_acid_dict[tri_nucleotide_5])
              amino_mutate_5=str(str(ref_AA_5)+str(int(int(int(Position[order])+2)/3))+str(variant_AA_5))
              if ref_AA_5 == variant_AA_5:
                 Annotate_S.append("Synonymous")
                 Mutation_S.append(amino_mutate_5)
              elif ref_AA_5 != variant_AA_5 and variant_AA_5 == "*":
                 Annotate_S.append("stop_gained")
                 Mutation_S.append(amino_mutate_5)
              else:
                 Annotate_S.append("Non_Synonymous")
                 Mutation_S.append(amino_mutate_5)
          if int(Position[order])%3==2:
              tri_nucleotide_6=str(PA_H1_seq[int(Position[order])-2]+VarAllele[order]+PA_H1_seq[int(Position[order])])
              ref_AA_6=PA_X_H1_pro[int(int(int(Position[order])-2)/3)]
              variant_AA_6= str(amino_acid_dict[tri_nucleotide_6])
              amino_mutate_6=str(str(ref_AA_6)+str(int(int(int(Position[order])+1)/3))+str(variant_AA_6))
              if ref_AA_6 == variant_AA_6:
                 Annotate_S.append("Synonymous")
                 Mutation_S.append(amino_mutate_6)
              elif ref_AA_6 != variant_AA_6 and variant_AA_6 == "*":
                 Annotate_S.append("stop_gained")
                 Mutation_S.append(amino_mutate_6)
              else:
                 Annotate_S.append("Non_Synonymous")
                 Mutation_S.append(amino_mutate_6)
       if int(Position[order])>571 and int(Position[order])<701:
          if int(int(Position[order])-571)%3==0:
             tri_nucleotide_7=str(PA_H1_seq[int(Position[order])-3]+PA_H1_seq[int(Position[order])-2]+VarAllele[order])
             ref_AA_7=PA_X_H1_pro[int(int(int(Position[order])-571)/3)+190-1]
             variant_AA_7= str(amino_acid_dict[tri_nucleotide_7])
             amino_mutate_7=str(str(ref_AA_7)+str(int(int(Position[order])-571)/3+190)+str(variant_AA_7))
             if ref_AA_7 == variant_AA_7:
                Annotate_S.append("Synonymous")
                Mutation_S.append(amino_mutate_7)
             elif ref_AA_7 != variant_AA_7 and variant_AA_7 == "*":
                Annotate_S.append("stop_gained")
                Mutation_S.append(amino_mutate_7)
             else:
                Annotate_S.append("Non_Synonymous")
                Mutation_S.append(amino_mutate_7)
          if int(int(Position[order])-571)%3==1:
             tri_nucleotide_8=str(VarAllele[order]+PA_H1_seq[int(Position[order])]+PA_H1_seq[int(Position[order])+1])
             ref_AA_8=PA_X_H1_pro[int(int(int(Position[order])-571+2)/3)+190-1]
             variant_AA_8= str(amino_acid_dict[tri_nucleotide_8])
             amino_mutate_8=str(str(ref_AA_8)+str(int(int(Position[order])-571+2)/3+190)+str(variant_AA_8))
             if ref_AA_8 == variant_AA_8:
                Annotate_S.append("Synonymous")
                Mutation_S.append(amino_mutate_8)
             elif ref_AA_8 != variant_AA_8 and variant_AA_8 == "*":
                Annotate_S.append("stop_gained")
                Mutation_S.append(amino_mutate_8)
             else:
                Annotate_S.append("Non_Synonymous")
                Mutation_S.append(amino_mutate_8)
          if int(int(Position[order])-571)%3==2:
             tri_nucleotide_9=str(PA_H1_seq[int(Position[order])-2]+VarAllele[order]+PA_H1_seq[int(Position[order])])
             ref_AA_9=PA_X_H1_pro[int(int(int(Position[order])-571+1)/3)+190-1]
             variant_AA_9= str(amino_acid_dict[tri_nucleotide_9])
             amino_mutate_9=str(str(ref_AA_9)+str(int(int(Position[order])-571+1)/3+190)+str(variant_AA_9))
             if ref_AA_9 == variant_AA_9:
                Annotate_S.append("Synonymous")
                Mutation_S.append(amino_mutate_9)
             elif ref_AA_9 != variant_AA_9 and variant_AA_9 == "*":
                Annotate_S.append("stop_gained")
                Mutation_S.append(amino_mutate_9)
             else:
                Annotate_S.append("Non_Synonymous")
                Mutation_S.append(amino_mutate_9)
       if int(Position[order])==571 or int(Position[order])>700:
          Annotate_S.append("NA")
          Mutation_S.append("NA")
          

if "PA_H3" in name:
   Annotate=[]
   Annotate_S=[]
   Mutation=[]
   Mutation_S=[]
   for order in range(0,len(Position),1):
       if int(Position[order])%3==0:
          tri_nucleotide_1=str(PA_H3_seq[int(Position[order])-3]+PA_H3_seq[int(Position[order])-2]+VarAllele[order])
          ref_AA_1=PA_H3_pro[int(int(Position[order])/3)-1]
          variant_AA_1= str(amino_acid_dict[tri_nucleotide_1])
          amino_mutate_1=str(str(ref_AA_1)+str(int(Position[order])/3)+str(variant_AA_1))
          if ref_AA_1 == variant_AA_1:
             Annotate.append("Synonymous")
             Mutation.append(amino_mutate_1)
          elif ref_AA_1 != variant_AA_1 and variant_AA_1 == "*":
             Annotate.append("stop_gained")
             Mutation.append(amino_mutate_1)
          else:
             Annotate.append("Non_Synonymous")
             Mutation.append(amino_mutate_1)
       if int(Position[order])%3==1:
          tri_nucleotide_2=str(VarAllele[order]+PA_H3_seq[int(Position[order])]+PA_H3_seq[int(Position[order])+1])
          ref_AA_2=PA_H3_pro[int(int(int(Position[order])-1)/3)]
          variant_AA_2= str(amino_acid_dict[tri_nucleotide_2])
          amino_mutate_2=str(str(ref_AA_2)+str(int(int(int(Position[order])+2)/3))+str(variant_AA_2))
          if ref_AA_2 == variant_AA_2:
             Annotate.append("Synonymous")
             Mutation.append(amino_mutate_2)
          elif ref_AA_2 != variant_AA_2 and variant_AA_2 == "*":
             Annotate.append("stop_gained")
             Mutation.append(amino_mutate_2)
          else:
             Annotate.append("Non_Synonymous")
             Mutation.append(amino_mutate_2)
       if int(Position[order])%3==2:
          tri_nucleotide_3=str(PA_H3_seq[int(Position[order])-2]+VarAllele[order]+PA_H3_seq[int(Position[order])])
          ref_AA_3=PA_H3_pro[int(int(int(Position[order])-2)/3)]
          variant_AA_3= str(amino_acid_dict[tri_nucleotide_3])
          amino_mutate_3=str(str(ref_AA_3)+str(int(int(int(Position[order])+1)/3))+str(variant_AA_3))
          if ref_AA_3 == variant_AA_3:
             Annotate.append("Synonymous")
             Mutation.append(amino_mutate_3)
          elif ref_AA_3 != variant_AA_3 and variant_AA_3 == "*":
             Annotate.append("stop_gained")
             Mutation.append(amino_mutate_3)
          else:
             Annotate.append("Non_Synonymous")
             Mutation.append(amino_mutate_3)
       if int(Position[order])>0 and int(Position[order])<571:
          if int(Position[order])%3==0:
              tri_nucleotide_4=str(PA_H3_seq[int(Position[order])-3]+PA_H3_seq[int(Position[order])-2]+VarAllele[order])
              ref_AA_4=PA_X_H3_pro[int(int(Position[order])/3)-1]
              variant_AA_4= str(amino_acid_dict[tri_nucleotide_4])
              amino_mutate_4=str(str(ref_AA_4)+str(int(Position[order])/3)+str(variant_AA_4))
              if ref_AA_4 == variant_AA_4:
                 Annotate_S.append("Synonymous")
                 Mutation_S.append(amino_mutate_4)
              elif ref_AA_4 != variant_AA_4 and variant_AA_4 == "*":
                 Annotate_S.append("stop_gained")
                 Mutation_S.append(amino_mutate_4)
              else:
                 Annotate_S.append("Non_Synonymous")
                 Mutation_S.append(amino_mutate_4)
          if int(Position[order])%3==1:
              tri_nucleotide_5=str(VarAllele[order]+PA_H3_seq[int(Position[order])]+PA_H3_seq[int(Position[order])+1])
              ref_AA_5=PA_X_H3_pro[int(int(int(Position[order])-1)/3)]
              variant_AA_5= str(amino_acid_dict[tri_nucleotide_5])
              amino_mutate_5=str(str(ref_AA_5)+str(int(int(int(Position[order])+2)/3))+str(variant_AA_5))
              if ref_AA_5 == variant_AA_5:
                 Annotate_S.append("Synonymous")
                 Mutation_S.append(amino_mutate_5)
              elif ref_AA_5 != variant_AA_5 and variant_AA_5 == "*":
                 Annotate_S.append("stop_gained")
                 Mutation_S.append(amino_mutate_5)
              else:
                 Annotate_S.append("Non_Synonymous")
                 Mutation_S.append(amino_mutate_5)
          if int(Position[order])%3==2:
              tri_nucleotide_6=str(PA_H3_seq[int(Position[order])-2]+VarAllele[order]+PA_H3_seq[int(Position[order])])
              ref_AA_6=PA_X_H3_pro[int(int(int(Position[order])-2)/3)]
              variant_AA_6= str(amino_acid_dict[tri_nucleotide_6])
              amino_mutate_6=str(str(ref_AA_6)+str(int(int(int(Position[order])+1)/3))+str(variant_AA_6))
              if ref_AA_6 == variant_AA_6:
                 Annotate_S.append("Synonymous")
                 Mutation_S.append(amino_mutate_6)
              elif ref_AA_6 != variant_AA_6 and variant_AA_6 == "*":
                 Annotate_S.append("stop_gained")
                 Mutation_S.append(amino_mutate_6)
              else:
                 Annotate_S.append("Non_Synonymous")
                 Mutation_S.append(amino_mutate_6)
       if int(Position[order])>571 and int(Position[order])<701:
          if int(int(Position[order])-571)%3==0:
             tri_nucleotide_7=str(PA_H3_seq[int(Position[order])-3]+PA_H3_seq[int(Position[order])-2]+VarAllele[order])
             ref_AA_7=PA_X_H3_pro[int(int(int(Position[order])-571)/3)+190-1]
             variant_AA_7= str(amino_acid_dict[tri_nucleotide_7])
             amino_mutate_7=str(str(ref_AA_7)+str(int(int(Position[order])-571)/3+190)+str(variant_AA_7))
             if ref_AA_7 == variant_AA_7:
                Annotate_S.append("Synonymous")
                Mutation_S.append(amino_mutate_7)
             elif ref_AA_7 != variant_AA_7 and variant_AA_7 == "*":
                Annotate_S.append("stop_gained")
                Mutation_S.append(amino_mutate_7)
             else:
                Annotate_S.append("Non_Synonymous")
                Mutation_S.append(amino_mutate_7)
          if int(int(Position[order])-571)%3==1:
             tri_nucleotide_8=str(VarAllele[order]+PA_H3_seq[int(Position[order])]+PA_H3_seq[int(Position[order])+1])
             ref_AA_8=PA_X_H3_pro[int(int(int(Position[order])-571+2)/3)+190-1]
             variant_AA_8= str(amino_acid_dict[tri_nucleotide_8])
             amino_mutate_8=str(str(ref_AA_8)+str(int(int(Position[order])-571+2)/3+190)+str(variant_AA_8))
             if ref_AA_8 == variant_AA_8:
                Annotate_S.append("Synonymous")
                Mutation_S.append(amino_mutate_8)
             elif ref_AA_8 != variant_AA_8 and variant_AA_8 == "*":
                Annotate_S.append("stop_gained")
                Mutation_S.append(amino_mutate_8)
             else:
                Annotate_S.append("Non_Synonymous")
                Mutation_S.append(amino_mutate_8)
          if int(int(Position[order])-571)%3==2:
             tri_nucleotide_9=str(PA_H3_seq[int(Position[order])-2]+VarAllele[order]+PA_H3_seq[int(Position[order])])
             ref_AA_9=PA_X_H3_pro[int(int(int(Position[order])-571+1)/3)+190-1]
             variant_AA_9= str(amino_acid_dict[tri_nucleotide_9])
             amino_mutate_9=str(str(ref_AA_9)+str(int(int(Position[order])-571+1)/3+190)+str(variant_AA_9))
             if ref_AA_9 == variant_AA_9:
                Annotate_S.append("Synonymous")
                Mutation_S.append(amino_mutate_9)
             elif ref_AA_9 != variant_AA_9 and variant_AA_9 == "*":
                Annotate_S.append("stop_gained")
                Mutation_S.append(amino_mutate_9)
             else:
                Annotate_S.append("Non_Synonymous")
                Mutation_S.append(amino_mutate_9)
       if int(Position[order])==571 or int(Position[order])>700:
          Annotate_S.append("NA")
          Mutation_S.append("NA")

if "NP_H1" in name:
   Annotate=[]
   Annotate_S=[]
   Mutation=[]
   Mutation_S=[]
   for order in range(0,len(Position),1):
       Annotate_S.append("NA")
       Mutation_S.append("NA")
       if int(Position[order])%3==0:
          tri_nucleotide_1=str(NP_H1_seq[int(Position[order])-3]+NP_H1_seq[int(Position[order])-2]+VarAllele[order])
          ref_AA_1=NP_H1_pro[int(int(Position[order])/3)-1]
          variant_AA_1= str(amino_acid_dict[tri_nucleotide_1])
          amino_mutate_1=str(str(ref_AA_1)+str(int(Position[order])/3)+str(variant_AA_1))
          if ref_AA_1 == variant_AA_1:
             Annotate.append("Synonymous")
             Mutation.append(amino_mutate_1)
          elif ref_AA_1 != variant_AA_1 and variant_AA_1 == "*":
             Annotate.append("stop_gained")
             Mutation.append(amino_mutate_1)
          else:
             Annotate.append("Non_Synonymous")
             Mutation.append(amino_mutate_1)
       if int(Position[order])%3==1:
          tri_nucleotide_2=str(VarAllele[order]+NP_H1_seq[int(Position[order])]+NP_H1_seq[int(Position[order])+1])
          ref_AA_2=NP_H1_pro[int(int(int(Position[order])-1)/3)]
          variant_AA_2= str(amino_acid_dict[tri_nucleotide_2])
          amino_mutate_2=str(str(ref_AA_2)+str(int(int(int(Position[order])+2)/3))+str(variant_AA_2))
          if ref_AA_2 == variant_AA_2:
             Annotate.append("Synonymous")
             Mutation.append(amino_mutate_2)
          elif ref_AA_2 != variant_AA_2 and variant_AA_2 == "*":
             Annotate.append("stop_gained")
             Mutation.append(amino_mutate_2)
          else:
             Annotate.append("Non_Synonymous")
             Mutation.append(amino_mutate_2)
       if int(Position[order])%3==2:
          tri_nucleotide_3=str(NP_H1_seq[int(Position[order])-2]+VarAllele[order]+NP_H1_seq[int(Position[order])])
          ref_AA_3=NP_H1_pro[int(int(int(Position[order])-2)/3)]
          variant_AA_3= str(amino_acid_dict[tri_nucleotide_3])
          amino_mutate_3=str(str(ref_AA_3)+str(int(int(int(Position[order])+1)/3))+str(variant_AA_3))
          if ref_AA_3 == variant_AA_3:
             Annotate.append("Synonymous")
             Mutation.append(amino_mutate_3)
          elif ref_AA_3 != variant_AA_3 and variant_AA_3 == "*":
             Annotate.append("stop_gained")
             Mutation.append(amino_mutate_3)
          else:
             Annotate.append("Non_Synonymous")
             Mutation.append(amino_mutate_3)

if "NP_H3" in name:
   Annotate=[]
   Annotate_S=[]
   Mutation=[]
   Mutation_S=[]
   for order in range(0,len(Position),1):
       Annotate_S.append("NA")
       Mutation_S.append("NA")
       if int(Position[order])%3==0:
          tri_nucleotide_1=str(NP_H3_seq[int(Position[order])-3]+NP_H3_seq[int(Position[order])-2]+VarAllele[order])
          ref_AA_1=NP_H3_pro[int(int(Position[order])/3)-1]
          variant_AA_1= str(amino_acid_dict[tri_nucleotide_1])
          amino_mutate_1=str(str(ref_AA_1)+str(int(Position[order])/3)+str(variant_AA_1))
          if ref_AA_1 == variant_AA_1:
             Annotate.append("Synonymous")
             Mutation.append(amino_mutate_1)
          elif ref_AA_1 != variant_AA_1 and variant_AA_1 == "*":
             Annotate.append("stop_gained")
             Mutation.append(amino_mutate_1)
          else:
             Annotate.append("Non_Synonymous")
             Mutation.append(amino_mutate_1)
       if int(Position[order])%3==1:
          tri_nucleotide_2=str(VarAllele[order]+NP_H3_seq[int(Position[order])]+NP_H3_seq[int(Position[order])+1])
          ref_AA_2=NP_H3_pro[int(int(int(Position[order])-1)/3)]
          variant_AA_2= str(amino_acid_dict[tri_nucleotide_2])
          amino_mutate_2=str(str(ref_AA_2)+str(int(int(int(Position[order])+2)/3))+str(variant_AA_2))
          if ref_AA_2 == variant_AA_2:
             Annotate.append("Synonymous")
             Mutation.append(amino_mutate_2)
          elif ref_AA_2 != variant_AA_2 and variant_AA_2 == "*":
             Annotate.append("stop_gained")
             Mutation.append(amino_mutate_2)
          else:
             Annotate.append("Non_Synonymous")
             Mutation.append(amino_mutate_2)
       if int(Position[order])%3==2:
          tri_nucleotide_3=str(NP_H3_seq[int(Position[order])-2]+VarAllele[order]+NP_H3_seq[int(Position[order])])
          ref_AA_3=NP_H3_pro[int(int(int(Position[order])-2)/3)]
          variant_AA_3= str(amino_acid_dict[tri_nucleotide_3])
          amino_mutate_3=str(str(ref_AA_3)+str(int(int(int(Position[order])+1)/3))+str(variant_AA_3))
          if ref_AA_3 == variant_AA_3:
             Annotate.append("Synonymous")
             Mutation.append(amino_mutate_3)
          elif ref_AA_3 != variant_AA_3 and variant_AA_3 == "*":
             Annotate.append("stop_gained")
             Mutation.append(amino_mutate_3)
          else:
             Annotate.append("Non_Synonymous")
             Mutation.append(amino_mutate_3)

if "M_H1" in name:
   Annotate=[]
   Annotate_S=[]
   Mutation=[]
   Mutation_S=[]
   for order in range(0,len(Position),1):
       # M1 protein annotation
       if int(Position[order])>0 and int(Position[order])<760:
          if int(Position[order])%3==0:
              tri_nucleotide_1=str(M_H1_seq[int(Position[order])-3]+M_H1_seq[int(Position[order])-2]+VarAllele[order])
              ref_AA_1=M1_H1_pro[int(int(Position[order])/3)-1]
              variant_AA_1= str(amino_acid_dict[tri_nucleotide_1])
              amino_mutate_1=str(str(ref_AA_1)+str(int(Position[order])/3)+str(variant_AA_1))
              if ref_AA_1 == variant_AA_1:
                 Annotate.append("Synonymous")
                 Mutation.append(amino_mutate_1)
              elif ref_AA_1 != variant_AA_1 and variant_AA_1 == "*":
                 Annotate.append("stop_gained")
                 Mutation.append(amino_mutate_1)
              else:
                 Annotate.append("Non_Synonymous")
                 Mutation.append(amino_mutate_1)
          if int(Position[order])%3==1:
              tri_nucleotide_2=str(VarAllele[order]+M_H1_seq[int(Position[order])]+M_H1_seq[int(Position[order])+1])
              ref_AA_2=M1_H1_pro[int(int(int(Position[order])-1)/3)]
              variant_AA_2= str(amino_acid_dict[tri_nucleotide_2])
              amino_mutate_2=str(str(ref_AA_2)+str(int(int(int(Position[order])+2)/3))+str(variant_AA_2))
              if ref_AA_2 == variant_AA_2:
                 Annotate.append("Synonymous")
                 Mutation.append(amino_mutate_2)
              elif ref_AA_2 != variant_AA_2 and variant_AA_2 == "*":
                 Annotate.append("stop_gained")
                 Mutation.append(amino_mutate_2)
              else:
                 Annotate.append("Non_Synonymous")
                 Mutation.append(amino_mutate_2)
          if int(Position[order])%3==2:
              tri_nucleotide_3=str(M_H1_seq[int(Position[order])-2]+VarAllele[order]+M_H1_seq[int(Position[order])])
              ref_AA_3=M1_H1_pro[int(int(int(Position[order])-2)/3)]
              variant_AA_3= str(amino_acid_dict[tri_nucleotide_3])
              amino_mutate_3=str(str(ref_AA_3)+str(int(int(int(Position[order])+1)/3))+str(variant_AA_3))
              if ref_AA_3 == variant_AA_3:
                 Annotate.append("Synonymous")
                 Mutation.append(amino_mutate_3)
              elif ref_AA_3 != variant_AA_3 and variant_AA_3 == "*":
                 Annotate.append("stop_gained")
                 Mutation.append(amino_mutate_3)
              else:
                 Annotate.append("Non_Synonymous")
                 Mutation.append(amino_mutate_3)
                 #M2 protein annotation
       if int(Position[order])>0 and int(Position[order])<25:
          if int(Position[order])%3==0:
              tri_nucleotide_4=str(M_H1_seq[int(Position[order])-3]+M_H1_seq[int(Position[order])-2]+VarAllele[order])
              ref_AA_4=M2_H1_pro[int(int(Position[order])/3)-1]
              variant_AA_4= str(amino_acid_dict[tri_nucleotide_4])
              amino_mutate_4=str(str(ref_AA_4)+str(int(Position[order])/3)+str(variant_AA_4))
              if ref_AA_4 == variant_AA_4:
                 Annotate_S.append("Synonymous")
                 Mutation_S.append(amino_mutate_4)
              elif ref_AA_4 != variant_AA_4 and variant_AA_4 == "*":
                 Annotate_S.append("stop_gained")
                 Mutation_S.append(amino_mutate_4)
              else:
                 Annotate_S.append("Non_Synonymous")
                 Mutation_S.append(amino_mutate_4)
          if int(Position[order])%3==1:
              tri_nucleotide_5=str(VarAllele[order]+M_H1_seq[int(Position[order])]+M_H1_seq[int(Position[order])+1])
              ref_AA_5=M2_H1_pro[int(int(int(Position[order])-1)/3)]
              variant_AA_5= str(amino_acid_dict[tri_nucleotide_5])
              amino_mutate_5=str(str(ref_AA_5)+str(int(int(int(Position[order])+2)/3))+str(variant_AA_5))
              if ref_AA_5 == variant_AA_5:
                 Annotate_S.append("Synonymous")
                 Mutation_S.append(amino_mutate_5)
              elif ref_AA_5 != variant_AA_5 and variant_AA_5 == "*":
                 Annotate_S.append("stop_gained")
                 Mutation_S.append(amino_mutate_5)
              else:
                 Annotate_S.append("Non_Synonymous")
                 Mutation_S.append(amino_mutate_5)
          if int(Position[order])%3==2:
              tri_nucleotide_6=str(M_H1_seq[int(Position[order])-2]+VarAllele[order]+M_H1_seq[int(Position[order])])
              ref_AA_6=M2_H1_pro[int(int(int(Position[order])-2)/3)]
              variant_AA_6= str(amino_acid_dict[tri_nucleotide_6])
              amino_mutate_6=str(str(ref_AA_6)+str(int(int(int(Position[order])+1)/3))+str(variant_AA_6))
              if ref_AA_6 == variant_AA_6:
                 Annotate_S.append("Synonymous")
                 Mutation_S.append(amino_mutate_6)
              elif ref_AA_6 != variant_AA_6 and variant_AA_6 == "*":
                 Annotate_S.append("stop_gained")
                 Mutation_S.append(amino_mutate_6)
              else:
                 Annotate_S.append("Non_Synonymous")
                 Mutation_S.append(amino_mutate_6)
       if int(Position[order])>715 and int(Position[order])<983:
          if int(int(Position[order])-715)%3==0:
             tri_nucleotide_7=str(M_H1_seq[int(Position[order])-3]+M_H1_seq[int(Position[order])-2]+VarAllele[order])
             ref_AA_7=M2_H1_pro[int(int(int(Position[order])-715)/3)+9-1]
             variant_AA_7= str(amino_acid_dict[tri_nucleotide_7])
             amino_mutate_7=str(str(ref_AA_7)+str(int(int(Position[order])-715)/3+9)+str(variant_AA_7))
             if ref_AA_7 == variant_AA_7:
                Annotate_S.append("Synonymous")
                Mutation_S.append(amino_mutate_7)
             elif ref_AA_7 != variant_AA_7 and variant_AA_7 == "*":
                Annotate_S.append("stop_gained")
                Mutation_S.append(amino_mutate_7)
             else:
                Annotate_S.append("Non_Synonymous")
                Mutation_S.append(amino_mutate_7)
          if int(int(Position[order])-715)%3==1:
             tri_nucleotide_8=str(VarAllele[order]+M_H1_seq[int(Position[order])]+M_H1_seq[int(Position[order])+1])
             ref_AA_8=M2_H1_pro[int(int(int(Position[order])-715+2)/3)+9-1]
             variant_AA_8= str(amino_acid_dict[tri_nucleotide_8])
             amino_mutate_8=str(str(ref_AA_8)+str(int(int(int(Position[order])+2-715)/3+9))+str(variant_AA_8))
             if ref_AA_8 == variant_AA_8:
                Annotate_S.append("Synonymous")
                Mutation_S.append(amino_mutate_8)
             elif ref_AA_8 != variant_AA_8 and variant_AA_8 == "*":
                Annotate_S.append("stop_gained")
                Mutation_S.append(amino_mutate_8)
             else:
                Annotate_S.append("Non_Synonymous")
                Mutation_S.append(amino_mutate_8)
          if int(int(Position[order])-715)%3==2:
             tri_nucleotide_9=str(M_H1_seq[int(Position[order])-2]+VarAllele[order]+M_H1_seq[int(Position[order])])
             ref_AA_9=M2_H1_pro[int(int(int(Position[order])-715+1)/3)+9-1]
             variant_AA_9= str(amino_acid_dict[tri_nucleotide_9])
             amino_mutate_9=str(str(ref_AA_9)+str(int(int(int(Position[order])+1-715)/3+9))+str(variant_AA_9))
             if ref_AA_9 == variant_AA_9:
                Annotate_S.append("Synonymous")
                Mutation_S.append(amino_mutate_9)
             elif ref_AA_9 != variant_AA_9 and variant_AA_9 == "*":
                Annotate_S.append("stop_gained")
                Mutation_S.append(amino_mutate_9)
             else:
                Annotate_S.append("Non_Synonymous")
                Mutation_S.append(amino_mutate_9)
       if int(Position[order])==25:
          tri_nucleotide_10=str(VarAllele[order]+M_H1_seq[25]+M_H1_seq[714])
          variant_AA_10= str(amino_acid_dict[tri_nucleotide_10])
          ref_AA_10=M2_H1_pro[8]
          amino_mutate_10=str(str(ref_AA_10)+"9"+str(variant_AA_10))
          if ref_AA_10 == variant_AA_10:
             Annotate_S.append("Synonymous")
             Mutation_S.append(amino_mutate_10)
          elif ref_AA_10 != variant_AA_10 and variant_AA_10 == "*":
             Annotate_S.append("stop_gained")
             Mutation_S.append(amino_mutate_10)
          else:
             Annotate_S.append("Non_Synonymous")
             Mutation_S.append(amino_mutate_10)
       if int(Position[order])==26:
          tri_nucleotide_11=str(M_H1_seq[24]+VarAllele[order]+M_H1_seq[714])
          variant_AA_11= str(amino_acid_dict[tri_nucleotide_11])
          ref_AA_11=M2_H1_pro[8]
          amino_mutate_11=str(str(ref_AA_11)+"9"+str(variant_AA_11))
          if ref_AA_11 == variant_AA_11:
             Annotate_S.append("Synonymous")
             Mutation_S.append(amino_mutate_11)
          elif ref_AA_11 != variant_AA_11 and variant_AA_11 == "*":
             Annotate_S.append("stop_gained")
             Mutation_S.append(amino_mutate_11)
          else:
             Annotate_S.append("Non_Synonymous")
             Mutation_S.append(amino_mutate_11)
       if int(Position[order])==715:
          tri_nucleotide_12=str(M_H1_seq[24]+M_H1_seq[25]+VarAllele[order])
          variant_AA_12= str(amino_acid_dict[tri_nucleotide_12])
          ref_AA_12=M2_H1_pro[8]
          amino_mutate_12=str(str(ref_AA_12)+"9"+str(variant_AA_12))
          if ref_AA_12 == variant_AA_12:
             Annotate_S.append("Synonymous")
             Mutation_S.append(amino_mutate_12)
          elif ref_AA_12 != variant_AA_12 and variant_AA_12 == "*":
             Annotate_S.append("stop_gained")
             Mutation_S.append(amino_mutate_12)
          else:
             Annotate_S.append("Non_Synonymous")
             Mutation_S.append(amino_mutate_12)
       if int(Position[order])>26 and int(Position[order])<715:
          Annotate_S.append("NA")
          Mutation_S.append("NA")
       if int(Position[order])>759:
          Annotate.append("NA")
          Mutation.append("NA")


if "M_H3" in name:
   Annotate=[]
   Annotate_S=[]
   Mutation=[]
   Mutation_S=[]
   for order in range(0,len(Position),1):
       # M1 protein annotation
       if int(Position[order])>0 and int(Position[order])<760:
          if int(Position[order])%3==0:
              tri_nucleotide_1=str(M_H3_seq[int(Position[order])-3]+M_H3_seq[int(Position[order])-2]+VarAllele[order])
              ref_AA_1=M1_H3_pro[int(int(Position[order])/3)-1]
              variant_AA_1= str(amino_acid_dict[tri_nucleotide_1])
              amino_mutate_1=str(str(ref_AA_1)+str(int(Position[order])/3)+str(variant_AA_1))
              if ref_AA_1 == variant_AA_1:
                 Annotate.append("Synonymous")
                 Mutation.append(amino_mutate_1)
              elif ref_AA_1 != variant_AA_1 and variant_AA_1 == "*":
                 Annotate.append("stop_gained")
                 Mutation.append(amino_mutate_1)
              else:
                 Annotate.append("Non_Synonymous")
                 Mutation.append(amino_mutate_1)
          if int(Position[order])%3==1:
              tri_nucleotide_2=str(VarAllele[order]+M_H3_seq[int(Position[order])]+M_H3_seq[int(Position[order])+1])
              ref_AA_2=M1_H3_pro[int(int(int(Position[order])-1)/3)]
              variant_AA_2= str(amino_acid_dict[tri_nucleotide_2])
              amino_mutate_2=str(str(ref_AA_2)+str(int(int(int(Position[order])+2)/3))+str(variant_AA_2))
              if ref_AA_2 == variant_AA_2:
                 Annotate.append("Synonymous")
                 Mutation.append(amino_mutate_2)
              elif ref_AA_2 != variant_AA_2 and variant_AA_2 == "*":
                 Annotate.append("stop_gained")
                 Mutation.append(amino_mutate_2)
              else:
                 Annotate.append("Non_Synonymous")
                 Mutation.append(amino_mutate_2)
          if int(Position[order])%3==2:
              tri_nucleotide_3=str(M_H3_seq[int(Position[order])-2]+VarAllele[order]+M_H3_seq[int(Position[order])])
              ref_AA_3=M1_H3_pro[int(int(int(Position[order])-2)/3)]
              variant_AA_3= str(amino_acid_dict[tri_nucleotide_3])
              amino_mutate_3=str(str(ref_AA_3)+str(int(int(int(Position[order])+1)/3))+str(variant_AA_3))
              if ref_AA_3 == variant_AA_3:
                 Annotate.append("Synonymous")
                 Mutation.append(amino_mutate_3)
              elif ref_AA_3 != variant_AA_3 and variant_AA_3 == "*":
                 Annotate.append("stop_gained")
                 Mutation.append(amino_mutate_3)
              else:
                 Annotate.append("Non_Synonymous")
                 Mutation.append(amino_mutate_3)
                 #M2 protein annotation
       if int(Position[order])>0 and int(Position[order])<25:
          if int(Position[order])%3==0:
              tri_nucleotide_4=str(M_H3_seq[int(Position[order])-3]+M_H3_seq[int(Position[order])-2]+VarAllele[order])
              ref_AA_4=M2_H3_pro[int(int(Position[order])/3)-1]
              variant_AA_4= str(amino_acid_dict[tri_nucleotide_4])
              amino_mutate_4=str(str(ref_AA_4)+str(int(Position[order])/3)+str(variant_AA_4))
              if ref_AA_4 == variant_AA_4:
                 Annotate_S.append("Synonymous")
                 Mutation_S.append(amino_mutate_4)
              elif ref_AA_4 != variant_AA_4 and variant_AA_4 == "*":
                 Annotate.append("stop_gained")
                 Mutation_S.append(amino_mutate_4)
              else:
                 Annotate.append("Non_Synonymous")
                 Mutation_S.append(amino_mutate_4)
          if int(Position[order])%3==1:
              tri_nucleotide_5=str(VarAllele[order]+M_H3_seq[int(Position[order])]+M_H3_seq[int(Position[order])+1])
              ref_AA_5=M2_H3_pro[int(int(int(Position[order])-1)/3)]
              variant_AA_5= str(amino_acid_dict[tri_nucleotide_5])
              amino_mutate_5=str(str(ref_AA_5)+str(int(int(int(Position[order])+2)/3))+str(variant_AA_5))
              if ref_AA_5 == variant_AA_5:
                 Annotate_S.append("Synonymous")
                 Mutation_S.append(amino_mutate_5)
              elif ref_AA_5 != variant_AA_5 and variant_AA_5 == "*":
                 Annotate_S.append("stop_gained")
                 Mutation_S.append(amino_mutate_5)
              else:
                 Annotate_S.append("Non_Synonymous")
                 Mutation_S.append(amino_mutate_5)
          if int(Position[order])%3==2:
              tri_nucleotide_6=str(M_H3_seq[int(Position[order])-2]+VarAllele[order]+M_H3_seq[int(Position[order])])
              ref_AA_6=M2_H3_pro[int(int(int(Position[order])-2)/3)]
              variant_AA_6= str(amino_acid_dict[tri_nucleotide_6])
              amino_mutate_6=str(str(ref_AA_6)+str(int(int(int(Position[order])+1)/3))+str(variant_AA_6))
              if ref_AA_6 == variant_AA_6:
                 Annotate_S.append("Synonymous")
                 Mutation_S.append(amino_mutate_6)
              elif ref_AA_6 != variant_AA_6 and variant_AA_6 == "*":
                 Annotate_S.append("stop_gained")
                 Mutation_S.append(amino_mutate_6)
              else:
                 Annotate_S.append("Non_Synonymous")
                 Mutation_S.append(amino_mutate_6)
       if int(Position[order])>715 and int(Position[order])<983:
          if int(int(Position[order])-715)%3==0:
             tri_nucleotide_7=str(M_H3_seq[int(Position[order])-3]+M_H3_seq[int(Position[order])-2]+VarAllele[order])
             ref_AA_7=M2_H3_pro[int(int(int(Position[order])-715)/3)+9-1]
             variant_AA_7= str(amino_acid_dict[tri_nucleotide_7])
             amino_mutate_7=str(str(ref_AA_7)+str(int(int(Position[order])-715)/3+9)+str(variant_AA_7))
             if ref_AA_7 == variant_AA_7:
                Annotate_S.append("Synonymous")
                Mutation_S.append(amino_mutate_7)
             elif ref_AA_7 != variant_AA_7 and variant_AA_7 == "*":
                Annotate_S.append("stop_gained")
                Mutation_S.append(amino_mutate_7)
             else:
                Annotate_S.append("Non_Synonymous")
                Mutation_S.append(amino_mutate_7)
          if int(int(Position[order])-715)%3==1:
             tri_nucleotide_8=str(VarAllele[order]+M_H3_seq[int(Position[order])]+M_H3_seq[int(Position[order])+1])
             ref_AA_8=M2_H3_pro[int(int(int(Position[order])-715+2)/3)+9-1]
             variant_AA_8= str(amino_acid_dict[tri_nucleotide_8])
             amino_mutate_8=str(str(ref_AA_8)+str(int(int(int(Position[order])+2-715)/3+9))+str(variant_AA_8))
             if ref_AA_8 == variant_AA_8:
                Annotate_S.append("Synonymous")
                Mutation_S.append(amino_mutate_8)
             elif ref_AA_8 != variant_AA_8 and variant_AA_8 == "*":
                Annotate_S.append("stop_gained")
                Mutation_S.append(amino_mutate_8)
             else:
                Annotate_S.append("Non_Synonymous")
                Mutation_S.append(amino_mutate_8)
          if int(int(Position[order])-715)%3==2:
             tri_nucleotide_9=str(M_H3_seq[int(Position[order])-2]+VarAllele[order]+M_H3_seq[int(Position[order])])
             ref_AA_9=M2_H3_pro[int(int(int(Position[order])-715+1)/3)+9-1]
             variant_AA_9= str(amino_acid_dict[tri_nucleotide_9])
             amino_mutate_9=str(str(ref_AA_9)+str(int(int(int(Position[order])+1-715)/3+9))+str(variant_AA_9))
             if ref_AA_9 == variant_AA_9:
                Annotate_S.append("Synonymous")
                Mutation_S.append(amino_mutate_9)
             elif ref_AA_9 != variant_AA_9 and variant_AA_9 == "*":
                Annotate_S.append("stop_gained")
                Mutation_S.append(amino_mutate_9)
             else:
                Annotate_S.append("Non_Synonymous")
                Mutation_S.append(amino_mutate_9)
       if int(Position[order])==25:
          tri_nucleotide_10=str(VarAllele[order]+M_H3_seq[25]+M_H3_seq[714])
          variant_AA_10= str(amino_acid_dict[tri_nucleotide_10])
          ref_AA_10=M2_H3_pro[8]
          amino_mutate_10=str(str(ref_AA_10)+"9"+str(variant_AA_10))
          if ref_AA_10 == variant_AA_10:
             Annotate_S.append("Synonymous")
             Mutation_S.append(amino_mutate_10)
          elif ref_AA_10 != variant_AA_10 and variant_AA_10 == "*":
             Annotate_S.append("stop_gained")
             Mutation_S.append(amino_mutate_10)
          else:
             Annotate_S.append("Non_Synonymous")
             Mutation_S.append(amino_mutate_10)
       if int(Position[order])==26:
          tri_nucleotide_11=str(M_H3_seq[24]+VarAllele[order]+M_H3_seq[714])
          variant_AA_11= str(amino_acid_dict[tri_nucleotide_11])
          ref_AA_11=M2_H3_pro[8]
          amino_mutate_11=str(str(ref_AA_11)+"9"+str(variant_AA_11))
          if ref_AA_11 == variant_AA_11:
             Annotate_S.append("Synonymous")
             Mutation_S.append(amino_mutate_11)
          elif ref_AA_11 != variant_AA_11 and variant_AA_11 == "*":
             Annotate_S.append("stop_gained")
             Mutation_S.append(amino_mutate_11)
          else:
             Annotate_S.append("Non_Synonymous")
             Mutation_S.append(amino_mutate_11)
       if int(Position[order])==715:
          tri_nucleotide_12=str(M_H3_seq[24]+M_H3_seq[25]+VarAllele[order])
          variant_AA_12= str(amino_acid_dict[tri_nucleotide_12])
          ref_AA_12=M2_H3_pro[8]
          amino_mutate_12=str(str(ref_AA_12)+"9"+str(variant_AA_12))
          if ref_AA_12 == variant_AA_12:
             Annotate_S.append("Synonymous")
             Mutation_S.append(amino_mutate_12)
          elif ref_AA_12 != variant_AA_12 and variant_AA_12 == "*":
             Annotate_S.append("stop_gained")
             Mutation_S.append(amino_mutate_12)
          else:
             Annotate_S.append("Non_Synonymous")
             Mutation_S.append(amino_mutate_12)
       if int(Position[order])>26 and int(Position[order])<715:
          Annotate_S.append("NA")
          Mutation_S.append("NA")
       if int(Position[order])>759:
          Annotate.append("NA")
          Mutation.append("NA")

if "NS_H1" in name:
   Annotate=[]
   Annotate_S=[]
   Mutation=[]
   Mutation_S=[]
   for order in range(0,len(Position),1):
       #Annotated for NS1 protein
       if int(Position[order])>0 and int(Position[order])<661:
          if int(Position[order])%3==0:
              tri_nucleotide_1=str(NS_H1_seq[int(Position[order])-3]+NS_H1_seq[int(Position[order])-2]+VarAllele[order])
              ref_AA_1=NS1_H1_pro[int(int(Position[order])/3)-1]
              variant_AA_1= str(amino_acid_dict[tri_nucleotide_1])
              amino_mutate_1=str(str(ref_AA_1)+str(int(Position[order])/3)+str(variant_AA_1))
              if ref_AA_1 == variant_AA_1:
                 Annotate.append("Synonymous")
                 Mutation.append(amino_mutate_1)
              elif ref_AA_1 != variant_AA_1 and variant_AA_1 == "*":
                 Annotate.append("stop_gained")
                 Mutation.append(amino_mutate_1)
              else:
                 Annotate.append("Non_Synonymous")
                 Mutation.append(amino_mutate_1)
          if int(Position[order])%3==1:
              tri_nucleotide_2=str(VarAllele[order]+NS_H1_seq[int(Position[order])]+NS_H1_seq[int(Position[order])+1])
              ref_AA_2=NS1_H1_pro[int(int(int(Position[order])-1)/3)]
              variant_AA_2= str(amino_acid_dict[tri_nucleotide_2])
              amino_mutate_2=str(str(ref_AA_2)+str(int(int(int(Position[order])+2)/3))+str(variant_AA_2))
              if ref_AA_2 == variant_AA_2:
                 Annotate.append("Synonymous")
                 Mutation.append(amino_mutate_2)
              elif ref_AA_2 != variant_AA_2 and variant_AA_2 == "*":
                 Annotate.append("stop_gained")
                 Mutation.append(amino_mutate_2)
              else:
                 Annotate.append("Non_Synonymous")
                 Mutation.append(amino_mutate_2)
          if int(Position[order])%3==2:
              tri_nucleotide_3=str(NS_H1_seq[int(Position[order])-2]+VarAllele[order]+NS_H1_seq[int(Position[order])])
              ref_AA_3=NS1_H1_pro[int(int(int(Position[order])-2)/3)]
              variant_AA_3= str(amino_acid_dict[tri_nucleotide_3])
              amino_mutate_3=str(str(ref_AA_3)+str(int(int(int(Position[order])+1)/3))+str(variant_AA_3))
              if ref_AA_3 == variant_AA_3:
                 Annotate.append("Synonymous")
                 Mutation.append(amino_mutate_3)
              elif ref_AA_3 != variant_AA_3 and variant_AA_3 == "*":
                 Annotate.append("stop_gained")
                 Mutation.append(amino_mutate_3)
              else:
                 Annotate.append("Non_Synonymous")
                 Mutation.append(amino_mutate_3)
                 #Annotated for NEP protein
       if int(Position[order])>0 and int(Position[order])<31:
          if int(Position[order])%3==0:
              tri_nucleotide_4=str(NS_H1_seq[int(Position[order])-3]+NS_H1_seq[int(Position[order])-2]+VarAllele[order])
              ref_AA_4=NEP_H1_pro[int(int(Position[order])/3)-1]
              variant_AA_4= str(amino_acid_dict[tri_nucleotide_4])
              amino_mutate_4=str(str(ref_AA_4)+str(int(Position[order])/3)+str(variant_AA_4))
              if ref_AA_4 == variant_AA_4:
                 Annotate_S.append("Synonymous")
                 Mutation_S.append(amino_mutate_4)
              elif ref_AA_4 != variant_AA_4 and variant_AA_4 == "*":
                 Annotate_S.append("stop_gained")
                 Mutation_S.append(amino_mutate_4)
              else:
                 Annotate_S.append("Non_Synonymous")
                 Mutation_S.append(amino_mutate_4)
          if int(Position[order])%3==1:
              tri_nucleotide_5=str(VarAllele[order]+NS_H1_seq[int(Position[order])]+NS_H1_seq[int(Position[order])+1])
              ref_AA_5=NEP_H1_pro[int(int(int(Position[order])-1)/3)]
              variant_AA_5= str(amino_acid_dict[tri_nucleotide_5])
              amino_mutate_5=str(str(ref_AA_5)+str(int(int(int(Position[order])+2)/3))+str(variant_AA_5))
              if ref_AA_5 == variant_AA_5:
                 Annotate_S.append("Synonymous")
                 Mutation_S.append(amino_mutate_5)
              elif ref_AA_5 != variant_AA_5 and variant_AA_5 == "*":
                 Annotate_S.append("stop_gained")
                 Mutation_S.append(amino_mutate_5)
              else:
                 Annotate_S.append("Non_Synonymous")
                 Mutation_S.append(amino_mutate_5)
          if int(Position[order])%3==2:
              tri_nucleotide_6=str(NS_H1_seq[int(Position[order])-2]+VarAllele[order]+NS_H1_seq[int(Position[order])])
              ref_AA_6=NEP_H1_pro[int(int(int(Position[order])-2)/3)]
              variant_AA_6= str(amino_acid_dict[tri_nucleotide_6])
              amino_mutate_6=str(str(ref_AA_6)+str(int(int(int(Position[order])+1)/3))+str(variant_AA_6))
              if ref_AA_6 == variant_AA_6:
                 Annotate_S.append("Synonymous")
                 Mutation_S.append(amino_mutate_6)
              elif ref_AA_6 != variant_AA_6 and variant_AA_6 == "*":
                 Annotate_S.append("stop_gained")
                 Mutation_S.append(amino_mutate_6)
              else:
                 Annotate_S.append("Non_Synonymous")
                 Mutation_S.append(amino_mutate_6)
       if int(Position[order])>502 and int(Position[order])<839:
          if int(int(Position[order])-502)%3==0:
             tri_nucleotide_7=str(NS_H1_seq[int(Position[order])-3]+NS_H1_seq[int(Position[order])-2]+VarAllele[order])
             ref_AA_7=NEP_H1_pro[int(int(int(Position[order])-502)/3)+10-1]
             variant_AA_7= str(amino_acid_dict[tri_nucleotide_7])
             amino_mutate_7=str(str(ref_AA_7)+str(int(int(Position[order])-502)/3+10)+str(variant_AA_7))
             if ref_AA_7 == variant_AA_7:
                Annotate_S.append("Synonymous")
                Mutation_S.append(amino_mutate_7)
             elif ref_AA_7 != variant_AA_7 and variant_AA_7 == "*":
                Annotate_S.append("stop_gained")
                Mutation_S.append(amino_mutate_7)
             else:
                Annotate_S.append("Non_Synonymous")
                Mutation_S.append(amino_mutate_7)
          if int(int(Position[order])-502)%3==1:
             tri_nucleotide_8=str(VarAllele[order]+NS_H1_seq[int(Position[order])]+NS_H1_seq[int(Position[order])+1])
             ref_AA_8=NEP_H1_pro[int(int(int(Position[order])-502+2)/3)+10-1]
             variant_AA_8= str(amino_acid_dict[tri_nucleotide_8])
             amino_mutate_8=str(str(ref_AA_8)+str(int(int(int(Position[order])-502+2)/3+10))+str(variant_AA_8))
             if ref_AA_8 == variant_AA_8:
                Annotate_S.append("Synonymous")
                Mutation_S.append(amino_mutate_8)
             elif ref_AA_8 != variant_AA_8 and variant_AA_8 == "*":
                Annotate_S.append("stop_gained")
                Mutation_S.append(amino_mutate_8)
             else:
                Annotate_S.append("Non_Synonymous")
                Mutation_S.append(amino_mutate_8)
          if int(int(Position[order])-502)%3==2:
             tri_nucleotide_9=str(NS_H1_seq[int(Position[order])-2]+VarAllele[order]+NS_H1_seq[int(Position[order])])
             ref_AA_9=NEP_H1_pro[int(int(int(Position[order])-502+1)/3)+10-1]
             variant_AA_9= str(amino_acid_dict[tri_nucleotide_9])
             amino_mutate_9=str(str(ref_AA_9)+str(int(int(int(Position[order])-502+1)/3+10))+str(variant_AA_9))
             if ref_AA_9 == variant_AA_9:
                Annotate_S.append("Synonymous")
                Mutation_S.append(amino_mutate_9)
             elif ref_AA_9 != variant_AA_9 and variant_AA_9 == "*":
                Annotate_S.append("stop_gained")
                Mutation_S.append(amino_mutate_9)
             else:
                Annotate_S.append("Non_Synonymous")
                Mutation_S.append(amino_mutate_9)
       if int(Position[order])>30 and int(Position[order])<503:
          Annotate_S.append("NA")
          Mutation_S.append("NA")
       if int(Position[order])>660:
          Annotate.append("NA")
          Mutation.append("NA")

if "NS_H3" in name:
   Annotate=[]
   Annotate_S=[]
   Mutation=[]
   Mutation_S=[]
   for order in range(0,len(Position),1):
       #Annotated for NS1 protein
       if int(Position[order])>0 and int(Position[order])<661:
          if int(Position[order])%3==0:
              tri_nucleotide_1=str(NS_H3_seq[int(Position[order])-3]+NS_H3_seq[int(Position[order])-2]+VarAllele[order])
              ref_AA_1=NS1_H3_pro[int(int(Position[order])/3)-1]
              variant_AA_1= str(amino_acid_dict[tri_nucleotide_1])
              amino_mutate_1=str(str(ref_AA_1)+str(int(Position[order])/3)+str(variant_AA_1))
              if ref_AA_1 == variant_AA_1:
                 Annotate.append("Synonymous")
                 Mutation.append(amino_mutate_1)
              elif ref_AA_1 != variant_AA_1 and variant_AA_1 == "*":
                 Annotate.append("stop_gained")
                 Mutation.append(amino_mutate_1)
              else:
                 Annotate.append("Non_Synonymous")
                 Mutation.append(amino_mutate_1)
          if int(Position[order])%3==1:
              tri_nucleotide_2=str(VarAllele[order]+NS_H3_seq[int(Position[order])]+NS_H3_seq[int(Position[order])+1])
              ref_AA_2=NS1_H3_pro[int(int(int(Position[order])-1)/3)]
              variant_AA_2= str(amino_acid_dict[tri_nucleotide_2])
              amino_mutate_2=str(str(ref_AA_2)+str(int(int(int(Position[order])+2)/3))+str(variant_AA_2))
              if ref_AA_2 == variant_AA_2:
                 Annotate.append("Synonymous")
                 Mutation.append(amino_mutate_2)
              elif ref_AA_2 != variant_AA_2 and variant_AA_2 == "*":
                 Annotate.append("stop_gained")
                 Mutation.append(amino_mutate_2)
              else:
                 Annotate.append("Non_Synonymous")
                 Mutation.append(amino_mutate_2)
          if int(Position[order])%3==2:
              tri_nucleotide_3=str(NS_H3_seq[int(Position[order])-2]+VarAllele[order]+NS_H3_seq[int(Position[order])])
              ref_AA_3=NS1_H3_pro[int(int(int(Position[order])-2)/3)]
              variant_AA_3= str(amino_acid_dict[tri_nucleotide_3])
              amino_mutate_3=str(str(ref_AA_3)+str(int(int(int(Position[order])+1)/3))+str(variant_AA_3))
              if ref_AA_3 == variant_AA_3:
                 Annotate.append("Synonymous")
                 Mutation.append(amino_mutate_3)
              elif ref_AA_3 != variant_AA_3 and variant_AA_3 == "*":
                 Annotate.append("stop_gained")
                 Mutation.append(amino_mutate_3)
              else:
                 Annotate.append("Non_Synonymous")
                 Mutation.append(amino_mutate_3)
                 #Annotated for NEP protein
       if int(Position[order])>0 and int(Position[order])<31:
          if int(Position[order])%3==0:
              tri_nucleotide_4=str(NS_H3_seq[int(Position[order])-3]+NS_H3_seq[int(Position[order])-2]+VarAllele[order])
              ref_AA_4=NEP_H3_pro[int(int(Position[order])/3)-1]
              variant_AA_4= str(amino_acid_dict[tri_nucleotide_4])
              amino_mutate_4=str(str(ref_AA_4)+str(int(Position[order])/3)+str(variant_AA_4))
              if ref_AA_4 == variant_AA_4:
                 Annotate_S.append("Synonymous")
                 Mutation_S.append(amino_mutate_4)
              elif ref_AA_4 != variant_AA_4 and variant_AA_4 == "*":
                 Annotate_S.append("stop_gained")
                 Mutation_S.append(amino_mutate_4)
              else:
                 Annotate_S.append("Non_Synonymous")
                 Mutation_S.append(amino_mutate_4)
          if int(Position[order])%3==1:
              tri_nucleotide_5=str(VarAllele[order]+NS_H3_seq[int(Position[order])]+NS_H3_seq[int(Position[order])+1])
              ref_AA_5=NEP_H3_pro[int(int(int(Position[order])-1)/3)]
              variant_AA_5= str(amino_acid_dict[tri_nucleotide_5])
              amino_mutate_5=str(str(ref_AA_5)+str(int(int(int(Position[order])+2)/3))+str(variant_AA_5))
              if ref_AA_5 == variant_AA_5:
                 Annotate_S.append("Synonymous")
                 Mutation_S.append(amino_mutate_5)
              elif ref_AA_5 != variant_AA_5 and variant_AA_5 == "*":
                 Annotate_S.append("stop_gained")
                 Mutation_S.append(amino_mutate_5)
              else:
                 Annotate_S.append("Non_Synonymous")
                 Mutation_S.append(amino_mutate_5)
          if int(Position[order])%3==2:
              tri_nucleotide_6=str(NS_H3_seq[int(Position[order])-2]+VarAllele[order]+NS_H3_seq[int(Position[order])])
              ref_AA_6=NEP_H3_pro[int(int(int(Position[order])-2)/3)]
              variant_AA_6= str(amino_acid_dict[tri_nucleotide_6])
              amino_mutate_6=str(str(ref_AA_6)+str(int(int(int(Position[order])+1)/3))+str(variant_AA_6))
              if ref_AA_6 == variant_AA_6:
                 Annotate_S.append("Synonymous")
                 Mutation_S.append(amino_mutate_6)
              elif ref_AA_6 != variant_AA_6 and variant_AA_6 == "*":
                 Annotate_S.append("stop_gained")
                 Mutation_S.append(amino_mutate_6)
              else:
                 Annotate_S.append("Non_Synonymous")
                 Mutation_S.append(amino_mutate_6)
       if int(Position[order])>502 and int(Position[order])<839:
          if int(int(Position[order])-502)%3==0:
             tri_nucleotide_7=str(NS_H3_seq[int(Position[order])-3]+NS_H3_seq[int(Position[order])-2]+VarAllele[order])
             ref_AA_7=NEP_H3_pro[int(int(int(Position[order])-502)/3)+10-1]
             variant_AA_7= str(amino_acid_dict[tri_nucleotide_7])
             amino_mutate_7=str(str(ref_AA_7)+str(int(int(Position[order])-502)/3+10)+str(variant_AA_7))
             if ref_AA_7 == variant_AA_7:
                Annotate_S.append("Synonymous")
                Mutation_S.append(amino_mutate_7)
             elif ref_AA_7 != variant_AA_7 and variant_AA_7 == "*":
                Annotate_S.append("stop_gained")
                Mutation_S.append(amino_mutate_7)
             else:
                Annotate_S.append("Non_Synonymous")
                Mutation_S.append(amino_mutate_7)
          if int(int(Position[order])-502)%3==1:
             tri_nucleotide_8=str(VarAllele[order]+NS_H3_seq[int(Position[order])]+NS_H3_seq[int(Position[order])+1])
             ref_AA_8=NEP_H3_pro[int(int(int(Position[order])-502+2)/3)+10-1]
             variant_AA_8= str(amino_acid_dict[tri_nucleotide_8])
             amino_mutate_8=str(str(ref_AA_8)+str(int(int(int(Position[order])-502+2)/3+10))+str(variant_AA_8))
             if ref_AA_8 == variant_AA_8:
                Annotate_S.append("Synonymous")
                Mutation_S.append(amino_mutate_8)
             elif ref_AA_8 != variant_AA_8 and variant_AA_8 == "*":
                Annotate_S.append("stop_gained")
                Mutation_S.append(amino_mutate_8)
             else:
                Annotate_S.append("Non_Synonymous")
                Mutation_S.append(amino_mutate_8)
          if int(int(Position[order])-502)%3==2:
             tri_nucleotide_9=str(NS_H3_seq[int(Position[order])-2]+VarAllele[order]+NS_H3_seq[int(Position[order])])
             ref_AA_9=NEP_H3_pro[int(int(int(Position[order])-502+1)/3)+10-1]
             variant_AA_9= str(amino_acid_dict[tri_nucleotide_9])
             amino_mutate_9=str(str(ref_AA_9)+str(int(int(int(Position[order])-502+1)/3+10))+str(variant_AA_9))
             if ref_AA_9 == variant_AA_9:
                Annotate_S.append("Synonymous")
                Mutation_S.append(amino_mutate_9)
             elif ref_AA_9 != variant_AA_9 and variant_AA_9 == "*":
                Annotate_S.append("stop_gained")
                Mutation_S.append(amino_mutate_9)
             else:
                Annotate_S.append("Non_Synonymous")
                Mutation_S.append(amino_mutate_9)
       if int(Position[order])>30 and int(Position[order])<503:
          Annotate_S.append("NA")
          Mutation_S.append("NA")
       if int(Position[order])>660:
          Annotate.append("NA")
          Mutation.append("NA")

for a in range(0,len(Mutation),1):
    if ".0" in Mutation[a]:
        Mutation[a] = str(Mutation[a]).replace(".0","")
    if ".0" in Mutation_S[a]:
        Mutation_S[a] = str(Mutation_S[a]).replace(".0","")
        
        
for i in range(0,len(Annotate),1):
    print(str(Sample[i]),str(Position[i]),str(Ref[i]),str(Cons[i]),str(Reads1[i]),str(Reads2[i]),str(VarFreq[i]),str(Strands1[i]),str(Strands2[i]),str(Qual1[i]),str(Qual2[i]),str(Pvalue[i]),str(MapQual1[i]),str(MapQual2[i]),str(Reads1Plus[i]),str(Reads1Minus[i]),str(Reads2Plus[i]),str(Reads2Minus[i]),str(VarAllele[i]),str(Day[i]),str(Treatment[i]),str(Segment[i]),str(Annotate[i]),str(Annotate_S[i]),str(Mutation[i]),str(Mutation_S[i]),sep=',', end='\n', file= out_file)

out_file.close()
